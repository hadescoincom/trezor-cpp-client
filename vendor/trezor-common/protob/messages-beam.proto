syntax = "proto2";
package hw.trezor.messages.hds;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageHds";

/**
 * //DEPRECATED
 * Structure representing hds KIDV (Key ID, Value) structure
 * @embed
 */
message HdsKeyIDV {
    optional uint64 idx = 1;
    optional uint32 type = 2;
    optional uint32 sub_idx = 3;

    optional uint64 value = 4;
}

/**
 * Structure representing hds CoinID (id, type, subIdx, amount, assetID) structure
 * @embed
 */
message HdsCoinID {
    optional uint64 idx = 1;
    optional uint32 type = 2;
    optional uint32 sub_idx = 3;
    optional uint64 amount = 4;
    optional uint32 asset_id = 5;
}

/**
 * Request: Generate key from given KIDV and export it's image
 * @start
 * @next HdsECCPoint
 */
message HdsGenerateKey {
    optional HdsKeyIDV kidv = 1;  // KIDV to generate key from
    optional bool is_coin_key = 2; // specifies, whether we should create either common or coin key
}

/**
 * Request: Generate nonce for the given slot index
 * @start
 * @next HdsECCPoint
 * @next Failure
 */
message HdsGenerateNonce {
    optional uint32 slot = 1; // Slot where generated nonce should be stored
}

/**
 * Request: Get public key of nonce for the given slot index
 * @start
 * @next HdsECCPoint
 * @next Failure
 */
message HdsGetNoncePublic {
    optional uint32 slot = 1; // Slot where generated nonce should be stored
}

/**
 * Structure representing ECC point
 * @embed
 * @end
 */
message HdsECCPoint {
    optional bytes x = 1; // Image of ECC point (only x)
    optional bool y = 2; // y part
}

/**
 * Structure representing HdsSignature
 * @embed
 * @end
 */
message HdsSignature {
    optional HdsECCPoint nonce_pub = 1; // Public nonce of the signature
    optional bytes sign_k = 2;           // k part of the signature
}

/**
 * Request: Send message in human-readable format to sign it's hash according to HDS rules.
 * @next HdsSignature
 * @next Failure
 * @end
 */
message HdsSignMessage {
    optional string msg = 1;         // text in human-readable format that needs to be signed
    optional uint64 kid_idx = 2;     // KeyIDV idx
    optional uint32 kid_sub_idx = 3; // KeyIDV sub idx
    optional bool show_display = 4;  // optionally show on display before sending the result
}

/**
 * Request: Ask device to verify message
 * @start
 * @next Success
 * @next Failure
 */
message HdsVerifyMessage {
    optional HdsSignature signature = 1;   // HDS message signature
    optional HdsECCPoint public_key = 2;  // HDS public key
    optional bytes message = 3;             // message to verify
}

/**
 * Request: Ask device for public key
 * @start
 * @next HdsECCPoint
 * @next Failure
 */
message HdsGetPublicKey {
    optional uint64 kid_idx = 1;     // KeyIDV idx
    optional uint32 kid_sub_idx = 2; // KeyIDV sub idx
    optional bool show_display = 3;  // optionally show on display before sending the result
}

/**
 * Request: Ask device for an owner key
 * @start
 * @next HdsOwnerKey
 * @next Failure
 */
message HdsGetOwnerKey {
    optional bool show_display = 1; // optionally show on display before sending the result
}

/**
 * Response: Contains owner key from device
 * @end
 */
message HdsOwnerKey {
    optional bytes key = 1; // owner key
}

/**
 * Request: generate rangeproof for the given CoinID
 * @next HdsRangeproofData
 * @next Failure
 */
message HdsGenerateRangeproof {
    optional HdsCoinID cid = 1;  // CoinID to generate rangeproof from
    optional HdsECCPoint pt0 = 2; // point0 for rangeproof
    optional HdsECCPoint pt1 = 3; // point1 for rangeproof
    optional bytes extra_sk0 = 4; // optional extra scalar0
    optional bytes extra_sk1 = 5; // optional extra scalar1
}


/**
 * Response: Contains rangeproof data structure for the given kidv
 * @end
 */
message HdsRangeproofData {
    optional bytes data_taux = 1; // rangeproof data (TauX)
    optional bool is_successful = 2; // is rangeproof calculate process was successful
    optional HdsECCPoint pt0 = 3; // point0 of rangeproof data
    optional HdsECCPoint pt1 = 4; // point1 of rangeproof data
}

/**
 * Response: signature for transaction
 * @end
 */
message HdsSignedTransaction {
    optional bytes signature = 1;
}

/**
 * Request: sign transaction with given inputs, outputs, transaction and kernel parameters
 * @next HdsSignedTransaction
 * @next Failure
 */
message HdsSignTransaction {
    repeated HdsKeyIDV inputs = 1; // KIDV inputs
    optional bytes offset_sk = 2; // Randomly generated offset (scalar)
    repeated HdsKeyIDV outputs = 3; // KIDV outputs
    optional uint32 nonce_slot = 4; // nonce slot which should be used
    optional HdsKernelParametersOld kernel_params = 5; // kernel parameters for challenge

    message HdsKernelParametersOld {
        optional uint64 fee = 1;
        optional HdsECCPoint commitment = 2;
        optional uint64 min_height = 4;
        optional uint64 max_height = 5;
        optional sint64 asset_emission = 6;
        optional bytes hash_lock = 7;
        optional HdsECCPoint multisig_nonce = 8;
        optional HdsECCPoint multisig_excess = 9;
    }
}

/**
 * Request: Ask device for the PKdf
 * @start
 * @next HdsPKdf
 * @next Failure
 */
message HdsGetPKdf {
    optional bool is_root_key = 1; // whether the requested PKdf should be derived from root (owner key).}
    optional uint32 child_idx = 2; // Child index. If is_root_key==true, this parameter (child_idx) is ignored.
    optional bool show_display = 3; // optionally show on display before sending the result
}

/**
 * Response: Contains PKdf key from device
 * @end
 */
message HdsPKdf {
    optional bytes key = 1; // public key
    optional HdsECCPoint cofactor_G = 2; // cofactor G
    optional HdsECCPoint cofactor_J = 3; // cofactor J
}

/**
 * Request: Ask device for the number of slots
 * @start
 * @next HdsNumSlots
 * @next Failure - if device is not initialized
 */
message HdsGetNumSlots {
    optional bool show_display = 1; // optionally show on display before sending the result
}

/**
 * Response: number of nonce slots available on the device
 * @end
 */
message HdsNumSlots {
    optional uint32 num_slots = 1; // number of nonce slots available on the device
}

/**
 * Structure representing Hds common transaction data
 * @embed
 * @end
 */
message HdsTxCommon {
    repeated HdsCoinID inputs = 1; // KIDV inputs
    optional bytes offset_sk = 2; // Randomly generated offset (scalar)
    repeated HdsCoinID outputs = 3; // KIDV outputs
    optional HdsKernelParameters kernel_params = 4; // kernel parameters for challenge

    message HdsKernelParameters {
        optional uint64 fee = 1;
        optional uint64 min_height = 2;
        optional uint64 max_height = 3;
        optional HdsECCPoint commitment = 4;
        optional HdsSignature signature = 5;
    }
}

/**
 * Structure representing Hds mutual transaction data
 * @embed
 * @end
 */
message HdsTxMutualInfo {
    optional bytes peer = 1; // Peer ID
    optional uint64 wallet_identity_key = 2; // Wallet identity ID Key
    optional HdsSignature payment_proof_signature = 3; // payment proof signature
}

/**
 * Request: sign transaction (send part). Performed 2 times.
 * @next HdsSignedTransactionSendResult
 * @next Failure
 */
message HdsSignTransactionSend {
    optional HdsTxCommon tx_common = 1; // Common transaction data
    optional HdsTxMutualInfo tx_mutual_info = 2; // Mutual transaction data
    optional uint32 nonce_slot = 3; // nonce slot which should be used
    optional bytes user_agreement = 4; // user agreement data. Set to Zero on 1st invocation
}

/**
 * Response: signed transaction (send part)
 * @end
 */
message HdsSignTransactionSendResult {
    optional HdsSignTransactionSend tx = 1; // TODO
}

/**
 * Request: sign transaction (receive part)
 * @next HdsSignedTransactionReceiveResult
 * @next Failure
 */
message HdsSignTransactionReceive {
    optional HdsTxCommon tx_common = 1; // Common transaction data
    optional HdsTxMutualInfo tx_mutual_info = 2; // Mutual transaction data
}

/**
 * Response: signed transaction (receive part)
 * @end
 */
message HdsSignTransactionReceiveResult {
    optional HdsSignTransactionReceive tx = 1; // TODO
}

/**
 * Request: sign transaction (split part - self send)
 * @next HdsSignedTransactionSplitResult
 * @next Failure
 */
message HdsSignTransactionSplit {
    optional HdsTxCommon tx_common = 1; // Common transaction data
}

/**
 * Response: signed transaction (split part)
 * @end
 */
message HdsSignTransactionSplitResult {
    optional HdsSignTransactionSplit tx = 1; // TODO
}
