// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-hds.proto

#include "messages-hds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HdsCoinID_messages_2dhds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HdsECCPoint_messages_2dhds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HdsKeyIDV_messages_2dhds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HdsSignTransactionSplit_messages_2dhds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HdsSignTransaction_HdsKernelParametersOld_messages_2dhds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HdsSignature_messages_2dhds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HdsTxMutualInfo_messages_2dhds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_HdsSignTransactionReceive_messages_2dhds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_HdsSignTransactionSend_messages_2dhds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_HdsTxCommon_HdsKernelParameters_messages_2dhds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dhds_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_HdsTxCommon_messages_2dhds_2eproto;
namespace hw {
namespace trezor {
namespace messages {
namespace hds {
class HdsKeyIDVDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsKeyIDV> _instance;
} _HdsKeyIDV_default_instance_;
class HdsCoinIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsCoinID> _instance;
} _HdsCoinID_default_instance_;
class HdsGenerateKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsGenerateKey> _instance;
} _HdsGenerateKey_default_instance_;
class HdsGenerateNonceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsGenerateNonce> _instance;
} _HdsGenerateNonce_default_instance_;
class HdsGetNoncePublicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsGetNoncePublic> _instance;
} _HdsGetNoncePublic_default_instance_;
class HdsECCPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsECCPoint> _instance;
} _HdsECCPoint_default_instance_;
class HdsSignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignature> _instance;
} _HdsSignature_default_instance_;
class HdsSignMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignMessage> _instance;
} _HdsSignMessage_default_instance_;
class HdsVerifyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsVerifyMessage> _instance;
} _HdsVerifyMessage_default_instance_;
class HdsGetPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsGetPublicKey> _instance;
} _HdsGetPublicKey_default_instance_;
class HdsGetOwnerKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsGetOwnerKey> _instance;
} _HdsGetOwnerKey_default_instance_;
class HdsOwnerKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsOwnerKey> _instance;
} _HdsOwnerKey_default_instance_;
class HdsGenerateRangeproofDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsGenerateRangeproof> _instance;
} _HdsGenerateRangeproof_default_instance_;
class HdsRangeproofDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsRangeproofData> _instance;
} _HdsRangeproofData_default_instance_;
class HdsSignedTransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignedTransaction> _instance;
} _HdsSignedTransaction_default_instance_;
class HdsSignTransaction_HdsKernelParametersOldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignTransaction_HdsKernelParametersOld> _instance;
} _HdsSignTransaction_HdsKernelParametersOld_default_instance_;
class HdsSignTransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignTransaction> _instance;
} _HdsSignTransaction_default_instance_;
class HdsGetPKdfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsGetPKdf> _instance;
} _HdsGetPKdf_default_instance_;
class HdsPKdfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsPKdf> _instance;
} _HdsPKdf_default_instance_;
class HdsGetNumSlotsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsGetNumSlots> _instance;
} _HdsGetNumSlots_default_instance_;
class HdsNumSlotsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsNumSlots> _instance;
} _HdsNumSlots_default_instance_;
class HdsTxCommon_HdsKernelParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsTxCommon_HdsKernelParameters> _instance;
} _HdsTxCommon_HdsKernelParameters_default_instance_;
class HdsTxCommonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsTxCommon> _instance;
} _HdsTxCommon_default_instance_;
class HdsTxMutualInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsTxMutualInfo> _instance;
} _HdsTxMutualInfo_default_instance_;
class HdsSignTransactionSendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignTransactionSend> _instance;
} _HdsSignTransactionSend_default_instance_;
class HdsSignTransactionSendResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignTransactionSendResult> _instance;
} _HdsSignTransactionSendResult_default_instance_;
class HdsSignTransactionReceiveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignTransactionReceive> _instance;
} _HdsSignTransactionReceive_default_instance_;
class HdsSignTransactionReceiveResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignTransactionReceiveResult> _instance;
} _HdsSignTransactionReceiveResult_default_instance_;
class HdsSignTransactionSplitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignTransactionSplit> _instance;
} _HdsSignTransactionSplit_default_instance_;
class HdsSignTransactionSplitResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HdsSignTransactionSplitResult> _instance;
} _HdsSignTransactionSplitResult_default_instance_;
}  // namespace hds
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static void InitDefaultsHdsKeyIDV_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsKeyIDV_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsKeyIDV();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsKeyIDV::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsKeyIDV_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsKeyIDV_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsCoinID_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsCoinID_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsCoinID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsCoinID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsCoinID_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsCoinID_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsGenerateKey_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsGenerateKey_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsGenerateKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsGenerateKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HdsGenerateKey_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHdsGenerateKey_messages_2dhds_2eproto}, {
      &scc_info_HdsKeyIDV_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsGenerateNonce_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsGenerateNonce_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsGenerateNonce();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsGenerateNonce::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsGenerateNonce_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsGenerateNonce_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsGetNoncePublic_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsGetNoncePublic_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsGetNoncePublic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsGetNoncePublic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsGetNoncePublic_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsGetNoncePublic_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsECCPoint_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsECCPoint_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsECCPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsECCPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsECCPoint_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsECCPoint_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsSignature_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignature_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HdsSignature_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHdsSignature_messages_2dhds_2eproto}, {
      &scc_info_HdsECCPoint_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsSignMessage_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignMessage_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsSignMessage_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsSignMessage_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsVerifyMessage_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsVerifyMessage_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsVerifyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsVerifyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HdsVerifyMessage_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHdsVerifyMessage_messages_2dhds_2eproto}, {
      &scc_info_HdsSignature_messages_2dhds_2eproto.base,
      &scc_info_HdsECCPoint_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsGetPublicKey_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsGetPublicKey_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsGetPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsGetPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsGetPublicKey_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsGetPublicKey_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsGetOwnerKey_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsGetOwnerKey_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsGetOwnerKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsGetOwnerKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsGetOwnerKey_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsGetOwnerKey_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsOwnerKey_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsOwnerKey_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsOwnerKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsOwnerKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsOwnerKey_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsOwnerKey_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsGenerateRangeproof_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsGenerateRangeproof_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsGenerateRangeproof();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsGenerateRangeproof::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HdsGenerateRangeproof_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHdsGenerateRangeproof_messages_2dhds_2eproto}, {
      &scc_info_HdsCoinID_messages_2dhds_2eproto.base,
      &scc_info_HdsECCPoint_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsRangeproofData_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsRangeproofData_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsRangeproofData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsRangeproofData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HdsRangeproofData_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHdsRangeproofData_messages_2dhds_2eproto}, {
      &scc_info_HdsECCPoint_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsSignedTransaction_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignedTransaction_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignedTransaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignedTransaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsSignedTransaction_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsSignedTransaction_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsSignTransaction_HdsKernelParametersOld_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignTransaction_HdsKernelParametersOld_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HdsSignTransaction_HdsKernelParametersOld_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHdsSignTransaction_HdsKernelParametersOld_messages_2dhds_2eproto}, {
      &scc_info_HdsECCPoint_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsSignTransaction_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignTransaction_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignTransaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignTransaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HdsSignTransaction_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHdsSignTransaction_messages_2dhds_2eproto}, {
      &scc_info_HdsKeyIDV_messages_2dhds_2eproto.base,
      &scc_info_HdsSignTransaction_HdsKernelParametersOld_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsGetPKdf_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsGetPKdf_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsGetPKdf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsGetPKdf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsGetPKdf_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsGetPKdf_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsPKdf_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsPKdf_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsPKdf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsPKdf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HdsPKdf_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHdsPKdf_messages_2dhds_2eproto}, {
      &scc_info_HdsECCPoint_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsGetNumSlots_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsGetNumSlots_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsGetNumSlots();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsGetNumSlots::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsGetNumSlots_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsGetNumSlots_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsNumSlots_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsNumSlots_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsNumSlots();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsNumSlots::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HdsNumSlots_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHdsNumSlots_messages_2dhds_2eproto}, {}};

static void InitDefaultsHdsTxCommon_HdsKernelParameters_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsTxCommon_HdsKernelParameters_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HdsTxCommon_HdsKernelParameters_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHdsTxCommon_HdsKernelParameters_messages_2dhds_2eproto}, {
      &scc_info_HdsECCPoint_messages_2dhds_2eproto.base,
      &scc_info_HdsSignature_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsTxCommon_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsTxCommon_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsTxCommon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsTxCommon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HdsTxCommon_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHdsTxCommon_messages_2dhds_2eproto}, {
      &scc_info_HdsCoinID_messages_2dhds_2eproto.base,
      &scc_info_HdsTxCommon_HdsKernelParameters_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsTxMutualInfo_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsTxMutualInfo_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsTxMutualInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsTxMutualInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HdsTxMutualInfo_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHdsTxMutualInfo_messages_2dhds_2eproto}, {
      &scc_info_HdsSignature_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsSignTransactionSend_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignTransactionSend_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignTransactionSend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignTransactionSend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HdsSignTransactionSend_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHdsSignTransactionSend_messages_2dhds_2eproto}, {
      &scc_info_HdsTxCommon_messages_2dhds_2eproto.base,
      &scc_info_HdsTxMutualInfo_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsSignTransactionSendResult_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignTransactionSendResult_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignTransactionSendResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignTransactionSendResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HdsSignTransactionSendResult_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHdsSignTransactionSendResult_messages_2dhds_2eproto}, {
      &scc_info_HdsSignTransactionSend_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsSignTransactionReceive_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignTransactionReceive_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignTransactionReceive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignTransactionReceive::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HdsSignTransactionReceive_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHdsSignTransactionReceive_messages_2dhds_2eproto}, {
      &scc_info_HdsTxCommon_messages_2dhds_2eproto.base,
      &scc_info_HdsTxMutualInfo_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsSignTransactionReceiveResult_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignTransactionReceiveResult_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignTransactionReceiveResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignTransactionReceiveResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HdsSignTransactionReceiveResult_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHdsSignTransactionReceiveResult_messages_2dhds_2eproto}, {
      &scc_info_HdsSignTransactionReceive_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsSignTransactionSplit_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignTransactionSplit_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignTransactionSplit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignTransactionSplit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HdsSignTransactionSplit_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHdsSignTransactionSplit_messages_2dhds_2eproto}, {
      &scc_info_HdsTxCommon_messages_2dhds_2eproto.base,}};

static void InitDefaultsHdsSignTransactionSplitResult_messages_2dhds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::hds::_HdsSignTransactionSplitResult_default_instance_;
    new (ptr) ::hw::trezor::messages::hds::HdsSignTransactionSplitResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::hds::HdsSignTransactionSplitResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HdsSignTransactionSplitResult_messages_2dhds_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHdsSignTransactionSplitResult_messages_2dhds_2eproto}, {
      &scc_info_HdsSignTransactionSplit_messages_2dhds_2eproto.base,}};

void InitDefaults_messages_2dhds_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_HdsKeyIDV_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsCoinID_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsGenerateKey_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsGenerateNonce_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsGetNoncePublic_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsECCPoint_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignature_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignMessage_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsVerifyMessage_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsGetPublicKey_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsGetOwnerKey_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsOwnerKey_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsGenerateRangeproof_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsRangeproofData_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignedTransaction_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignTransaction_HdsKernelParametersOld_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignTransaction_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsGetPKdf_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsPKdf_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsGetNumSlots_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsNumSlots_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsTxCommon_HdsKernelParameters_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsTxCommon_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsTxMutualInfo_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignTransactionSend_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignTransactionSendResult_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignTransactionReceive_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignTransactionReceiveResult_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignTransactionSplit_messages_2dhds_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HdsSignTransactionSplitResult_messages_2dhds_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_2dhds_2eproto[30];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_messages_2dhds_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_2dhds_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_2dhds_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsKeyIDV, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsKeyIDV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsKeyIDV, idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsKeyIDV, type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsKeyIDV, sub_idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsKeyIDV, value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsCoinID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsCoinID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsCoinID, idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsCoinID, type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsCoinID, sub_idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsCoinID, amount_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsCoinID, asset_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateKey, kidv_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateKey, is_coin_key_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateNonce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateNonce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateNonce, slot_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetNoncePublic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetNoncePublic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetNoncePublic, slot_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsECCPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsECCPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsECCPoint, x_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsECCPoint, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignature, nonce_pub_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignature, sign_k_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignMessage, msg_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignMessage, kid_idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignMessage, kid_sub_idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignMessage, show_display_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsVerifyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsVerifyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsVerifyMessage, signature_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsVerifyMessage, public_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsVerifyMessage, message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetPublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetPublicKey, kid_idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetPublicKey, kid_sub_idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetPublicKey, show_display_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetOwnerKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetOwnerKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetOwnerKey, show_display_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsOwnerKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsOwnerKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsOwnerKey, key_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateRangeproof, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateRangeproof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateRangeproof, cid_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateRangeproof, pt0_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateRangeproof, pt1_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateRangeproof, extra_sk0_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGenerateRangeproof, extra_sk1_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsRangeproofData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsRangeproofData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsRangeproofData, data_taux_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsRangeproofData, is_successful_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsRangeproofData, pt0_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsRangeproofData, pt1_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignedTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignedTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignedTransaction, signature_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld, fee_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld, commitment_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld, min_height_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld, max_height_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld, asset_emission_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld, hash_lock_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld, multisig_nonce_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld, multisig_excess_),
  4,
  1,
  5,
  6,
  7,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction, inputs_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction, offset_sk_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction, outputs_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction, nonce_slot_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransaction, kernel_params_),
  ~0u,
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetPKdf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetPKdf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetPKdf, is_root_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetPKdf, child_idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetPKdf, show_display_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsPKdf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsPKdf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsPKdf, key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsPKdf, cofactor_g_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsPKdf, cofactor_j_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetNumSlots, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetNumSlots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsGetNumSlots, show_display_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsNumSlots, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsNumSlots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsNumSlots, num_slots_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters, fee_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters, min_height_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters, max_height_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters, commitment_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters, signature_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon, inputs_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon, offset_sk_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon, outputs_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxCommon, kernel_params_),
  ~0u,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxMutualInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxMutualInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxMutualInfo, peer_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxMutualInfo, wallet_identity_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsTxMutualInfo, payment_proof_signature_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSend, tx_common_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSend, tx_mutual_info_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSend, nonce_slot_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSend, user_agreement_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSendResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSendResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSendResult, tx_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionReceive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionReceive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionReceive, tx_common_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionReceive, tx_mutual_info_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionReceiveResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionReceiveResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionReceiveResult, tx_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSplit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSplit, tx_common_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSplitResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSplitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::hds::HdsSignTransactionSplitResult, tx_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::hw::trezor::messages::hds::HdsKeyIDV)},
  { 13, 23, sizeof(::hw::trezor::messages::hds::HdsCoinID)},
  { 28, 35, sizeof(::hw::trezor::messages::hds::HdsGenerateKey)},
  { 37, 43, sizeof(::hw::trezor::messages::hds::HdsGenerateNonce)},
  { 44, 50, sizeof(::hw::trezor::messages::hds::HdsGetNoncePublic)},
  { 51, 58, sizeof(::hw::trezor::messages::hds::HdsECCPoint)},
  { 60, 67, sizeof(::hw::trezor::messages::hds::HdsSignature)},
  { 69, 78, sizeof(::hw::trezor::messages::hds::HdsSignMessage)},
  { 82, 90, sizeof(::hw::trezor::messages::hds::HdsVerifyMessage)},
  { 93, 101, sizeof(::hw::trezor::messages::hds::HdsGetPublicKey)},
  { 104, 110, sizeof(::hw::trezor::messages::hds::HdsGetOwnerKey)},
  { 111, 117, sizeof(::hw::trezor::messages::hds::HdsOwnerKey)},
  { 118, 128, sizeof(::hw::trezor::messages::hds::HdsGenerateRangeproof)},
  { 133, 142, sizeof(::hw::trezor::messages::hds::HdsRangeproofData)},
  { 146, 152, sizeof(::hw::trezor::messages::hds::HdsSignedTransaction)},
  { 153, 166, sizeof(::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld)},
  { 174, 184, sizeof(::hw::trezor::messages::hds::HdsSignTransaction)},
  { 189, 197, sizeof(::hw::trezor::messages::hds::HdsGetPKdf)},
  { 200, 208, sizeof(::hw::trezor::messages::hds::HdsPKdf)},
  { 211, 217, sizeof(::hw::trezor::messages::hds::HdsGetNumSlots)},
  { 218, 224, sizeof(::hw::trezor::messages::hds::HdsNumSlots)},
  { 225, 235, sizeof(::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters)},
  { 240, 249, sizeof(::hw::trezor::messages::hds::HdsTxCommon)},
  { 253, 261, sizeof(::hw::trezor::messages::hds::HdsTxMutualInfo)},
  { 264, 273, sizeof(::hw::trezor::messages::hds::HdsSignTransactionSend)},
  { 277, 283, sizeof(::hw::trezor::messages::hds::HdsSignTransactionSendResult)},
  { 284, 291, sizeof(::hw::trezor::messages::hds::HdsSignTransactionReceive)},
  { 293, 299, sizeof(::hw::trezor::messages::hds::HdsSignTransactionReceiveResult)},
  { 300, 306, sizeof(::hw::trezor::messages::hds::HdsSignTransactionSplit)},
  { 307, 313, sizeof(::hw::trezor::messages::hds::HdsSignTransactionSplitResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsKeyIDV_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsCoinID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsGenerateKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsGenerateNonce_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsGetNoncePublic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsECCPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsVerifyMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsGetPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsGetOwnerKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsOwnerKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsGenerateRangeproof_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsRangeproofData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignedTransaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignTransaction_HdsKernelParametersOld_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignTransaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsGetPKdf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsPKdf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsGetNumSlots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsNumSlots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsTxCommon_HdsKernelParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsTxCommon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsTxMutualInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignTransactionSend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignTransactionSendResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignTransactionReceive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignTransactionReceiveResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignTransactionSplit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::hds::_HdsSignTransactionSplitResult_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_2dhds_2eproto = {
  {}, AddDescriptors_messages_2dhds_2eproto, "messages-hds.proto", schemas,
  file_default_instances, TableStruct_messages_2dhds_2eproto::offsets,
  file_level_metadata_messages_2dhds_2eproto, 30, file_level_enum_descriptors_messages_2dhds_2eproto, file_level_service_descriptors_messages_2dhds_2eproto,
};

const char descriptor_table_protodef_messages_2dhds_2eproto[] =
  "\n\023messages-hds.proto\022\027hw.trezor.message"
  "s.hds\"G\n\nHdsKeyIDV\022\013\n\003idx\030\001 \001(\004\022\014\n\004typ"
  "e\030\002 \001(\r\022\017\n\007sub_idx\030\003 \001(\r\022\r\n\005value\030\004 \001(\004\""
  "Z\n\nHdsCoinID\022\013\n\003idx\030\001 \001(\004\022\014\n\004type\030\002 \001(\r"
  "\022\017\n\007sub_idx\030\003 \001(\r\022\016\n\006amount\030\004 \001(\004\022\020\n\010ass"
  "et_id\030\005 \001(\r\"Y\n\017HdsGenerateKey\0221\n\004kidv\030\001"
  " \001(\0132#.hw.trezor.messages.hds.HdsKeyID"
  "V\022\023\n\013is_coin_key\030\002 \001(\010\"!\n\021HdsGenerateNo"
  "nce\022\014\n\004slot\030\001 \001(\r\"\"\n\022HdsGetNoncePublic\022"
  "\014\n\004slot\030\001 \001(\r\"$\n\014HdsECCPoint\022\t\n\001x\030\001 \001(\014"
  "\022\t\n\001y\030\002 \001(\010\"Y\n\rHdsSignature\0228\n\tnonce_pu"
  "b\030\001 \001(\0132%.hw.trezor.messages.hds.HdsEC"
  "CPoint\022\016\n\006sign_k\030\002 \001(\014\"Z\n\017HdsSignMessag"
  "e\022\013\n\003msg\030\001 \001(\t\022\017\n\007kid_idx\030\002 \001(\004\022\023\n\013kid_s"
  "ub_idx\030\003 \001(\r\022\024\n\014show_display\030\004 \001(\010\"\232\001\n\021B"
  "eamVerifyMessage\0229\n\tsignature\030\001 \001(\0132&.hw"
  ".trezor.messages.hds.HdsSignature\0229\n\np"
  "ublic_key\030\002 \001(\0132%.hw.trezor.messages.bea"
  "m.HdsECCPoint\022\017\n\007message\030\003 \001(\014\"N\n\020HdsG"
  "etPublicKey\022\017\n\007kid_idx\030\001 \001(\004\022\023\n\013kid_sub_"
  "idx\030\002 \001(\r\022\024\n\014show_display\030\003 \001(\010\"\'\n\017HdsG"
  "etOwnerKey\022\024\n\014show_display\030\001 \001(\010\"\033\n\014Hds"
  "OwnerKey\022\013\n\003key\030\001 \001(\014\"\330\001\n\026HdsGenerateRa"
  "ngeproof\0220\n\003cid\030\001 \001(\0132#.hw.trezor.messag"
  "es.hds.HdsCoinID\0222\n\003pt0\030\002 \001(\0132%.hw.tre"
  "zor.messages.hds.HdsECCPoint\0222\n\003pt1\030\003 "
  "\001(\0132%.hw.trezor.messages.hds.HdsECCPoi"
  "nt\022\021\n\textra_sk0\030\004 \001(\014\022\021\n\textra_sk1\030\005 \001(\014"
  "\"\246\001\n\022HdsRangeproofData\022\021\n\tdata_taux\030\001 \001"
  "(\014\022\025\n\ris_successful\030\002 \001(\010\0222\n\003pt0\030\003 \001(\0132%"
  ".hw.trezor.messages.hds.HdsECCPoint\0222\n"
  "\003pt1\030\004 \001(\0132%.hw.trezor.messages.hds.Bea"
  "mECCPoint\"*\n\025HdsSignedTransaction\022\021\n\tsi"
  "gnature\030\001 \001(\014\"\272\004\n\023HdsSignTransaction\0223\n"
  "\006inputs\030\001 \003(\0132#.hw.trezor.messages.hds."
  "HdsKeyIDV\022\021\n\toffset_sk\030\002 \001(\014\0224\n\007outputs"
  "\030\003 \003(\0132#.hw.trezor.messages.hds.HdsKey"
  "IDV\022\022\n\nnonce_slot\030\004 \001(\r\022[\n\rkernel_params"
  "\030\005 \001(\0132D.hw.trezor.messages.hds.HdsSig"
  "nTransaction.HdsKernelParametersOld\032\263\002\n"
  "\027HdsKernelParametersOld\022\013\n\003fee\030\001 \001(\004\0229\n"
  "\ncommitment\030\002 \001(\0132%.hw.trezor.messages.b"
  "eam.HdsECCPoint\022\022\n\nmin_height\030\004 \001(\004\022\022\n\n"
  "max_height\030\005 \001(\004\022\026\n\016asset_emission\030\006 \001(\022"
  "\022\021\n\thash_lock\030\007 \001(\014\022=\n\016multisig_nonce\030\010 "
  "\001(\0132%.hw.trezor.messages.hds.HdsECCPoi"
  "nt\022>\n\017multisig_excess\030\t \001(\0132%.hw.trezor."
  "messages.hds.HdsECCPoint\"K\n\013HdsGetPKd"
  "f\022\023\n\013is_root_key\030\001 \001(\010\022\021\n\tchild_idx\030\002 \001("
  "\r\022\024\n\014show_display\030\003 \001(\010\"\215\001\n\010HdsPKdf\022\013\n\003"
  "key\030\001 \001(\014\0229\n\ncofactor_G\030\002 \001(\0132%.hw.trezo"
  "r.messages.hds.HdsECCPoint\0229\n\ncofactor"
  "_J\030\003 \001(\0132%.hw.trezor.messages.hds.HdsE"
  "CCPoint\"\'\n\017HdsGetNumSlots\022\024\n\014show_displ"
  "ay\030\001 \001(\010\"!\n\014HdsNumSlots\022\021\n\tnum_slots\030\001 "
  "\001(\r\"\243\003\n\014HdsTxCommon\0223\n\006inputs\030\001 \003(\0132#.h"
  "w.trezor.messages.hds.HdsCoinID\022\021\n\toff"
  "set_sk\030\002 \001(\014\0224\n\007outputs\030\003 \003(\0132#.hw.trezo"
  "r.messages.hds.HdsCoinID\022Q\n\rkernel_par"
  "ams\030\004 \001(\0132:.hw.trezor.messages.hds.Hds"
  "TxCommon.HdsKernelParameters\032\301\001\n\024HdsKe"
  "rnelParameters\022\013\n\003fee\030\001 \001(\004\022\022\n\nmin_heigh"
  "t\030\002 \001(\004\022\022\n\nmax_height\030\003 \001(\004\0229\n\ncommitmen"
  "t\030\004 \001(\0132%.hw.trezor.messages.hds.HdsEC"
  "CPoint\0229\n\tsignature\030\005 \001(\0132&.hw.trezor.me"
  "ssages.hds.HdsSignature\"\206\001\n\020HdsTxMutu"
  "alInfo\022\014\n\004peer\030\001 \001(\014\022\033\n\023wallet_identity_"
  "key\030\002 \001(\004\022G\n\027payment_proof_signature\030\003 \001"
  "(\0132&.hw.trezor.messages.hds.HdsSignatu"
  "re\"\302\001\n\027HdsSignTransactionSend\0228\n\ttx_com"
  "mon\030\001 \001(\0132%.hw.trezor.messages.hds.Hds"
  "TxCommon\022A\n\016tx_mutual_info\030\002 \001(\0132).hw.tr"
  "ezor.messages.hds.HdsTxMutualInfo\022\022\n\nn"
  "once_slot\030\003 \001(\r\022\026\n\016user_agreement\030\004 \001(\014\""
  "]\n\035HdsSignTransactionSendResult\022<\n\002tx\030\001"
  " \001(\01320.hw.trezor.messages.hds.HdsSignT"
  "ransactionSend\"\231\001\n\032HdsSignTransactionRe"
  "ceive\0228\n\ttx_common\030\001 \001(\0132%.hw.trezor.mes"
  "sages.hds.HdsTxCommon\022A\n\016tx_mutual_inf"
  "o\030\002 \001(\0132).hw.trezor.messages.hds.HdsTx"
  "MutualInfo\"c\n HdsSignTransactionReceive"
  "Result\022\?\n\002tx\030\001 \001(\01323.hw.trezor.messages."
  "hds.HdsSignTransactionReceive\"T\n\030HdsS"
  "ignTransactionSplit\0228\n\ttx_common\030\001 \001(\0132%"
  ".hw.trezor.messages.hds.HdsTxCommon\"_\n"
  "\036HdsSignTransactionSplitResult\022=\n\002tx\030\001 "
  "\001(\01321.hw.trezor.messages.hds.HdsSignTr"
  "ansactionSplitB8\n#com.satoshilabs.trezor"
  ".lib.protobufB\021TrezorMessageHds"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_messages_2dhds_2eproto = {
  false, InitDefaults_messages_2dhds_2eproto,
  descriptor_table_protodef_messages_2dhds_2eproto,
  "messages-hds.proto", &assign_descriptors_table_messages_2dhds_2eproto, 3552,
};

void AddDescriptors_messages_2dhds_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_2dhds_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2dhds_2eproto = []() { AddDescriptors_messages_2dhds_2eproto(); return true; }();
namespace hw {
namespace trezor {
namespace messages {
namespace hds {

// ===================================================================

void HdsKeyIDV::InitAsDefaultInstance() {
}
class HdsKeyIDV::HasBitSetters {
 public:
  static void set_has_idx(HdsKeyIDV* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_type(HdsKeyIDV* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sub_idx(HdsKeyIDV* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_value(HdsKeyIDV* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsKeyIDV::kIdxFieldNumber;
const int HdsKeyIDV::kTypeFieldNumber;
const int HdsKeyIDV::kSubIdxFieldNumber;
const int HdsKeyIDV::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsKeyIDV::HdsKeyIDV()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsKeyIDV)
}
HdsKeyIDV::HdsKeyIDV(const HdsKeyIDV& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsKeyIDV)
}

void HdsKeyIDV::SharedCtor() {
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(value_));
}

HdsKeyIDV::~HdsKeyIDV() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsKeyIDV)
  SharedDtor();
}

void HdsKeyIDV::SharedDtor() {
}

void HdsKeyIDV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsKeyIDV& HdsKeyIDV::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsKeyIDV_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsKeyIDV::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsKeyIDV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&idx_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsKeyIDV::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsKeyIDV*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 idx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sub_idx = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sub_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsKeyIDV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsKeyIDV)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sub_idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sub_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsKeyIDV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsKeyIDV)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsKeyIDV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsKeyIDV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 idx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->idx(), output);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 sub_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_idx(), output);
  }

  // optional uint64 value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsKeyIDV)
}

::google::protobuf::uint8* HdsKeyIDV::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsKeyIDV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->idx(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 sub_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_idx(), target);
  }

  // optional uint64 value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsKeyIDV)
  return target;
}

size_t HdsKeyIDV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsKeyIDV)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->idx());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 sub_idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_idx());
    }

    // optional uint64 value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsKeyIDV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsKeyIDV)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsKeyIDV* source =
      ::google::protobuf::DynamicCastToGenerated<HdsKeyIDV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsKeyIDV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsKeyIDV)
    MergeFrom(*source);
  }
}

void HdsKeyIDV::MergeFrom(const HdsKeyIDV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsKeyIDV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      sub_idx_ = from.sub_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsKeyIDV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsKeyIDV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsKeyIDV::CopyFrom(const HdsKeyIDV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsKeyIDV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsKeyIDV::IsInitialized() const {
  return true;
}

void HdsKeyIDV::Swap(HdsKeyIDV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsKeyIDV::InternalSwap(HdsKeyIDV* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(idx_, other->idx_);
  swap(type_, other->type_);
  swap(sub_idx_, other->sub_idx_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata HdsKeyIDV::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsCoinID::InitAsDefaultInstance() {
}
class HdsCoinID::HasBitSetters {
 public:
  static void set_has_idx(HdsCoinID* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_type(HdsCoinID* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sub_idx(HdsCoinID* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_amount(HdsCoinID* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_asset_id(HdsCoinID* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsCoinID::kIdxFieldNumber;
const int HdsCoinID::kTypeFieldNumber;
const int HdsCoinID::kSubIdxFieldNumber;
const int HdsCoinID::kAmountFieldNumber;
const int HdsCoinID::kAssetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsCoinID::HdsCoinID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsCoinID)
}
HdsCoinID::HdsCoinID(const HdsCoinID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&asset_id_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(asset_id_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsCoinID)
}

void HdsCoinID::SharedCtor() {
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asset_id_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(asset_id_));
}

HdsCoinID::~HdsCoinID() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsCoinID)
  SharedDtor();
}

void HdsCoinID::SharedDtor() {
}

void HdsCoinID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsCoinID& HdsCoinID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsCoinID_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsCoinID::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsCoinID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&asset_id_) -
        reinterpret_cast<char*>(&idx_)) + sizeof(asset_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsCoinID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsCoinID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 idx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sub_idx = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sub_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 amount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 asset_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_asset_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsCoinID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsCoinID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sub_idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sub_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 asset_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_asset_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsCoinID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsCoinID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsCoinID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsCoinID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 idx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->idx(), output);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 sub_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_idx(), output);
  }

  // optional uint64 amount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional uint32 asset_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->asset_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsCoinID)
}

::google::protobuf::uint8* HdsCoinID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsCoinID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->idx(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 sub_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_idx(), target);
  }

  // optional uint64 amount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional uint32 asset_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->asset_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsCoinID)
  return target;
}

size_t HdsCoinID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsCoinID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->idx());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 sub_idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_idx());
    }

    // optional uint64 amount = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint32 asset_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asset_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsCoinID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsCoinID)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsCoinID* source =
      ::google::protobuf::DynamicCastToGenerated<HdsCoinID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsCoinID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsCoinID)
    MergeFrom(*source);
  }
}

void HdsCoinID::MergeFrom(const HdsCoinID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsCoinID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      sub_idx_ = from.sub_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      asset_id_ = from.asset_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsCoinID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsCoinID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsCoinID::CopyFrom(const HdsCoinID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsCoinID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsCoinID::IsInitialized() const {
  return true;
}

void HdsCoinID::Swap(HdsCoinID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsCoinID::InternalSwap(HdsCoinID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(idx_, other->idx_);
  swap(type_, other->type_);
  swap(sub_idx_, other->sub_idx_);
  swap(amount_, other->amount_);
  swap(asset_id_, other->asset_id_);
}

::google::protobuf::Metadata HdsCoinID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsGenerateKey::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsGenerateKey_default_instance_._instance.get_mutable()->kidv_ = const_cast< ::hw::trezor::messages::hds::HdsKeyIDV*>(
      ::hw::trezor::messages::hds::HdsKeyIDV::internal_default_instance());
}
class HdsGenerateKey::HasBitSetters {
 public:
  static const ::hw::trezor::messages::hds::HdsKeyIDV& kidv(const HdsGenerateKey* msg);
  static void set_has_kidv(HdsGenerateKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_coin_key(HdsGenerateKey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::hds::HdsKeyIDV&
HdsGenerateKey::HasBitSetters::kidv(const HdsGenerateKey* msg) {
  return *msg->kidv_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsGenerateKey::kKidvFieldNumber;
const int HdsGenerateKey::kIsCoinKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsGenerateKey::HdsGenerateKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsGenerateKey)
}
HdsGenerateKey::HdsGenerateKey(const HdsGenerateKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kidv()) {
    kidv_ = new ::hw::trezor::messages::hds::HdsKeyIDV(*from.kidv_);
  } else {
    kidv_ = nullptr;
  }
  is_coin_key_ = from.is_coin_key_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsGenerateKey)
}

void HdsGenerateKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsGenerateKey_messages_2dhds_2eproto.base);
  ::memset(&kidv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_coin_key_) -
      reinterpret_cast<char*>(&kidv_)) + sizeof(is_coin_key_));
}

HdsGenerateKey::~HdsGenerateKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsGenerateKey)
  SharedDtor();
}

void HdsGenerateKey::SharedDtor() {
  if (this != internal_default_instance()) delete kidv_;
}

void HdsGenerateKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsGenerateKey& HdsGenerateKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsGenerateKey_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsGenerateKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsGenerateKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(kidv_ != nullptr);
    kidv_->Clear();
  }
  is_coin_key_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsGenerateKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsGenerateKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.hds.HdsKeyIDV kidv = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsKeyIDV::_InternalParse;
        object = msg->mutable_kidv();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool is_coin_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_coin_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsGenerateKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsGenerateKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.hds.HdsKeyIDV kidv = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kidv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_coin_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_coin_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coin_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsGenerateKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsGenerateKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsGenerateKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsGenerateKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsKeyIDV kidv = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::kidv(this), output);
  }

  // optional bool is_coin_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_coin_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsGenerateKey)
}

::google::protobuf::uint8* HdsGenerateKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsGenerateKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsKeyIDV kidv = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::kidv(this), target);
  }

  // optional bool is_coin_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_coin_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsGenerateKey)
  return target;
}

size_t HdsGenerateKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsGenerateKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hw.trezor.messages.hds.HdsKeyIDV kidv = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kidv_);
    }

    // optional bool is_coin_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsGenerateKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsGenerateKey)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsGenerateKey* source =
      ::google::protobuf::DynamicCastToGenerated<HdsGenerateKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsGenerateKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsGenerateKey)
    MergeFrom(*source);
  }
}

void HdsGenerateKey::MergeFrom(const HdsGenerateKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsGenerateKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_kidv()->::hw::trezor::messages::hds::HdsKeyIDV::MergeFrom(from.kidv());
    }
    if (cached_has_bits & 0x00000002u) {
      is_coin_key_ = from.is_coin_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsGenerateKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsGenerateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsGenerateKey::CopyFrom(const HdsGenerateKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsGenerateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsGenerateKey::IsInitialized() const {
  return true;
}

void HdsGenerateKey::Swap(HdsGenerateKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsGenerateKey::InternalSwap(HdsGenerateKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kidv_, other->kidv_);
  swap(is_coin_key_, other->is_coin_key_);
}

::google::protobuf::Metadata HdsGenerateKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsGenerateNonce::InitAsDefaultInstance() {
}
class HdsGenerateNonce::HasBitSetters {
 public:
  static void set_has_slot(HdsGenerateNonce* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsGenerateNonce::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsGenerateNonce::HdsGenerateNonce()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsGenerateNonce)
}
HdsGenerateNonce::HdsGenerateNonce(const HdsGenerateNonce& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsGenerateNonce)
}

void HdsGenerateNonce::SharedCtor() {
  slot_ = 0u;
}

HdsGenerateNonce::~HdsGenerateNonce() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsGenerateNonce)
  SharedDtor();
}

void HdsGenerateNonce::SharedDtor() {
}

void HdsGenerateNonce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsGenerateNonce& HdsGenerateNonce::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsGenerateNonce_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsGenerateNonce::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsGenerateNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsGenerateNonce::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsGenerateNonce*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsGenerateNonce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsGenerateNonce)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsGenerateNonce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsGenerateNonce)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsGenerateNonce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsGenerateNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsGenerateNonce)
}

::google::protobuf::uint8* HdsGenerateNonce::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsGenerateNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsGenerateNonce)
  return target;
}

size_t HdsGenerateNonce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsGenerateNonce)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 slot = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsGenerateNonce::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsGenerateNonce)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsGenerateNonce* source =
      ::google::protobuf::DynamicCastToGenerated<HdsGenerateNonce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsGenerateNonce)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsGenerateNonce)
    MergeFrom(*source);
  }
}

void HdsGenerateNonce::MergeFrom(const HdsGenerateNonce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsGenerateNonce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slot()) {
    set_slot(from.slot());
  }
}

void HdsGenerateNonce::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsGenerateNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsGenerateNonce::CopyFrom(const HdsGenerateNonce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsGenerateNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsGenerateNonce::IsInitialized() const {
  return true;
}

void HdsGenerateNonce::Swap(HdsGenerateNonce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsGenerateNonce::InternalSwap(HdsGenerateNonce* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slot_, other->slot_);
}

::google::protobuf::Metadata HdsGenerateNonce::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsGetNoncePublic::InitAsDefaultInstance() {
}
class HdsGetNoncePublic::HasBitSetters {
 public:
  static void set_has_slot(HdsGetNoncePublic* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsGetNoncePublic::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsGetNoncePublic::HdsGetNoncePublic()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsGetNoncePublic)
}
HdsGetNoncePublic::HdsGetNoncePublic(const HdsGetNoncePublic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsGetNoncePublic)
}

void HdsGetNoncePublic::SharedCtor() {
  slot_ = 0u;
}

HdsGetNoncePublic::~HdsGetNoncePublic() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsGetNoncePublic)
  SharedDtor();
}

void HdsGetNoncePublic::SharedDtor() {
}

void HdsGetNoncePublic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsGetNoncePublic& HdsGetNoncePublic::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsGetNoncePublic_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsGetNoncePublic::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsGetNoncePublic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsGetNoncePublic::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsGetNoncePublic*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsGetNoncePublic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsGetNoncePublic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsGetNoncePublic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsGetNoncePublic)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsGetNoncePublic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsGetNoncePublic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsGetNoncePublic)
}

::google::protobuf::uint8* HdsGetNoncePublic::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsGetNoncePublic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsGetNoncePublic)
  return target;
}

size_t HdsGetNoncePublic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsGetNoncePublic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 slot = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsGetNoncePublic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsGetNoncePublic)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsGetNoncePublic* source =
      ::google::protobuf::DynamicCastToGenerated<HdsGetNoncePublic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsGetNoncePublic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsGetNoncePublic)
    MergeFrom(*source);
  }
}

void HdsGetNoncePublic::MergeFrom(const HdsGetNoncePublic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsGetNoncePublic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slot()) {
    set_slot(from.slot());
  }
}

void HdsGetNoncePublic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsGetNoncePublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsGetNoncePublic::CopyFrom(const HdsGetNoncePublic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsGetNoncePublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsGetNoncePublic::IsInitialized() const {
  return true;
}

void HdsGetNoncePublic::Swap(HdsGetNoncePublic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsGetNoncePublic::InternalSwap(HdsGetNoncePublic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slot_, other->slot_);
}

::google::protobuf::Metadata HdsGetNoncePublic::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsECCPoint::InitAsDefaultInstance() {
}
class HdsECCPoint::HasBitSetters {
 public:
  static void set_has_x(HdsECCPoint* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_y(HdsECCPoint* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsECCPoint::kXFieldNumber;
const int HdsECCPoint::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsECCPoint::HdsECCPoint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsECCPoint)
}
HdsECCPoint::HdsECCPoint(const HdsECCPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_x()) {
    x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_);
  }
  y_ = from.y_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsECCPoint)
}

void HdsECCPoint::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsECCPoint_messages_2dhds_2eproto.base);
  x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_ = false;
}

HdsECCPoint::~HdsECCPoint() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsECCPoint)
  SharedDtor();
}

void HdsECCPoint::SharedDtor() {
  x_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HdsECCPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsECCPoint& HdsECCPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsECCPoint_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsECCPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsECCPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    x_.ClearNonDefaultToEmptyNoArena();
  }
  y_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsECCPoint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsECCPoint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_x();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsECCPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsECCPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsECCPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsECCPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsECCPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsECCPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->x(), output);
  }

  // optional bool y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsECCPoint)
}

::google::protobuf::uint8* HdsECCPoint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsECCPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes x = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->x(), target);
  }

  // optional bool y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsECCPoint)
  return target;
}

size_t HdsECCPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsECCPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x());
    }

    // optional bool y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsECCPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsECCPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsECCPoint* source =
      ::google::protobuf::DynamicCastToGenerated<HdsECCPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsECCPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsECCPoint)
    MergeFrom(*source);
  }
}

void HdsECCPoint::MergeFrom(const HdsECCPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsECCPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_);
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsECCPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsECCPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsECCPoint::CopyFrom(const HdsECCPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsECCPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsECCPoint::IsInitialized() const {
  return true;
}

void HdsECCPoint::Swap(HdsECCPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsECCPoint::InternalSwap(HdsECCPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  x_.Swap(&other->x_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(y_, other->y_);
}

::google::protobuf::Metadata HdsECCPoint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignature::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsSignature_default_instance_._instance.get_mutable()->nonce_pub_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
}
class HdsSignature::HasBitSetters {
 public:
  static const ::hw::trezor::messages::hds::HdsECCPoint& nonce_pub(const HdsSignature* msg);
  static void set_has_nonce_pub(HdsSignature* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sign_k(HdsSignature* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::hds::HdsECCPoint&
HdsSignature::HasBitSetters::nonce_pub(const HdsSignature* msg) {
  return *msg->nonce_pub_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignature::kNoncePubFieldNumber;
const int HdsSignature::kSignKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignature::HdsSignature()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignature)
}
HdsSignature::HdsSignature(const HdsSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_k()) {
    sign_k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_k_);
  }
  if (from.has_nonce_pub()) {
    nonce_pub_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.nonce_pub_);
  } else {
    nonce_pub_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignature)
}

void HdsSignature::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignature_messages_2dhds_2eproto.base);
  sign_k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_pub_ = nullptr;
}

HdsSignature::~HdsSignature() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignature)
  SharedDtor();
}

void HdsSignature::SharedDtor() {
  sign_k_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nonce_pub_;
}

void HdsSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignature& HdsSignature::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignature_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sign_k_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(nonce_pub_ != nullptr);
      nonce_pub_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignature::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignature*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.hds.HdsECCPoint nonce_pub = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_nonce_pub();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bytes sign_k = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sign_k();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.hds.HdsECCPoint nonce_pub = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nonce_pub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_k = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_k()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsECCPoint nonce_pub = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::nonce_pub(this), output);
  }

  // optional bytes sign_k = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sign_k(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignature)
}

::google::protobuf::uint8* HdsSignature::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsECCPoint nonce_pub = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::nonce_pub(this), target);
  }

  // optional bytes sign_k = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sign_k(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignature)
  return target;
}

size_t HdsSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes sign_k = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_k());
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint nonce_pub = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *nonce_pub_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignature* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignature)
    MergeFrom(*source);
  }
}

void HdsSignature::MergeFrom(const HdsSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sign_k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_k_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_nonce_pub()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.nonce_pub());
    }
  }
}

void HdsSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignature::CopyFrom(const HdsSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignature::IsInitialized() const {
  return true;
}

void HdsSignature::Swap(HdsSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignature::InternalSwap(HdsSignature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sign_k_.Swap(&other->sign_k_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nonce_pub_, other->nonce_pub_);
}

::google::protobuf::Metadata HdsSignature::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignMessage::InitAsDefaultInstance() {
}
class HdsSignMessage::HasBitSetters {
 public:
  static void set_has_msg(HdsSignMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_kid_idx(HdsSignMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_kid_sub_idx(HdsSignMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_show_display(HdsSignMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignMessage::kMsgFieldNumber;
const int HdsSignMessage::kKidIdxFieldNumber;
const int HdsSignMessage::kKidSubIdxFieldNumber;
const int HdsSignMessage::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignMessage::HdsSignMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignMessage)
}
HdsSignMessage::HdsSignMessage(const HdsSignMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&kid_idx_, &from.kid_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_display_) -
    reinterpret_cast<char*>(&kid_idx_)) + sizeof(show_display_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignMessage)
}

void HdsSignMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignMessage_messages_2dhds_2eproto.base);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&kid_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_display_) -
      reinterpret_cast<char*>(&kid_idx_)) + sizeof(show_display_));
}

HdsSignMessage::~HdsSignMessage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignMessage)
  SharedDtor();
}

void HdsSignMessage::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HdsSignMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignMessage& HdsSignMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignMessage_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&kid_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_display_) -
        reinterpret_cast<char*>(&kid_idx_)) + sizeof(show_display_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string msg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.hds.HdsSignMessage.msg");
        object = msg->mutable_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 kid_idx = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_kid_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kid_sub_idx = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_kid_sub_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool show_display = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.hds.HdsSignMessage.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 kid_idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_kid_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kid_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kid_sub_idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_kid_sub_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kid_sub_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.hds.HdsSignMessage.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // optional uint64 kid_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->kid_idx(), output);
  }

  // optional uint32 kid_sub_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kid_sub_idx(), output);
  }

  // optional bool show_display = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignMessage)
}

::google::protobuf::uint8* HdsSignMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.hds.HdsSignMessage.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional uint64 kid_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->kid_idx(), target);
  }

  // optional uint32 kid_sub_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kid_sub_idx(), target);
  }

  // optional bool show_display = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignMessage)
  return target;
}

size_t HdsSignMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string msg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint64 kid_idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kid_idx());
    }

    // optional uint32 kid_sub_idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kid_sub_idx());
    }

    // optional bool show_display = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignMessage* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignMessage)
    MergeFrom(*source);
  }
}

void HdsSignMessage::MergeFrom(const HdsSignMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      kid_idx_ = from.kid_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      kid_sub_idx_ = from.kid_sub_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      show_display_ = from.show_display_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsSignMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignMessage::CopyFrom(const HdsSignMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignMessage::IsInitialized() const {
  return true;
}

void HdsSignMessage::Swap(HdsSignMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignMessage::InternalSwap(HdsSignMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kid_idx_, other->kid_idx_);
  swap(kid_sub_idx_, other->kid_sub_idx_);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata HdsSignMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsVerifyMessage::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsVerifyMessage_default_instance_._instance.get_mutable()->signature_ = const_cast< ::hw::trezor::messages::hds::HdsSignature*>(
      ::hw::trezor::messages::hds::HdsSignature::internal_default_instance());
  ::hw::trezor::messages::hds::_HdsVerifyMessage_default_instance_._instance.get_mutable()->public_key_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
}
class HdsVerifyMessage::HasBitSetters {
 public:
  static const ::hw::trezor::messages::hds::HdsSignature& signature(const HdsVerifyMessage* msg);
  static void set_has_signature(HdsVerifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& public_key(const HdsVerifyMessage* msg);
  static void set_has_public_key(HdsVerifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_message(HdsVerifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::hds::HdsSignature&
HdsVerifyMessage::HasBitSetters::signature(const HdsVerifyMessage* msg) {
  return *msg->signature_;
}
const ::hw::trezor::messages::hds::HdsECCPoint&
HdsVerifyMessage::HasBitSetters::public_key(const HdsVerifyMessage* msg) {
  return *msg->public_key_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsVerifyMessage::kSignatureFieldNumber;
const int HdsVerifyMessage::kPublicKeyFieldNumber;
const int HdsVerifyMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsVerifyMessage::HdsVerifyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsVerifyMessage)
}
HdsVerifyMessage::HdsVerifyMessage(const HdsVerifyMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_signature()) {
    signature_ = new ::hw::trezor::messages::hds::HdsSignature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from.has_public_key()) {
    public_key_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsVerifyMessage)
}

void HdsVerifyMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsVerifyMessage_messages_2dhds_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_key_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(public_key_));
}

HdsVerifyMessage::~HdsVerifyMessage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsVerifyMessage)
  SharedDtor();
}

void HdsVerifyMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete public_key_;
}

void HdsVerifyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsVerifyMessage& HdsVerifyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsVerifyMessage_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsVerifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsVerifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(public_key_ != nullptr);
      public_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsVerifyMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsVerifyMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.hds.HdsSignature signature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsSignature::_InternalParse;
        object = msg->mutable_signature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint public_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_public_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bytes message = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsVerifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsVerifyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.hds.HdsSignature signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint public_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsVerifyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsVerifyMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsVerifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsVerifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsSignature signature = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::signature(this), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint public_key = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::public_key(this), output);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsVerifyMessage)
}

::google::protobuf::uint8* HdsVerifyMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsVerifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsSignature signature = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::signature(this), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint public_key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::public_key(this), target);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsVerifyMessage)
  return target;
}

size_t HdsVerifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsVerifyMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional .hw.trezor.messages.hds.HdsSignature signature = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint public_key = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *public_key_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsVerifyMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsVerifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsVerifyMessage* source =
      ::google::protobuf::DynamicCastToGenerated<HdsVerifyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsVerifyMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsVerifyMessage)
    MergeFrom(*source);
  }
}

void HdsVerifyMessage::MergeFrom(const HdsVerifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsVerifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::hw::trezor::messages::hds::HdsSignature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_public_key()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.public_key());
    }
  }
}

void HdsVerifyMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsVerifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsVerifyMessage::CopyFrom(const HdsVerifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsVerifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsVerifyMessage::IsInitialized() const {
  return true;
}

void HdsVerifyMessage::Swap(HdsVerifyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsVerifyMessage::InternalSwap(HdsVerifyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signature_, other->signature_);
  swap(public_key_, other->public_key_);
}

::google::protobuf::Metadata HdsVerifyMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsGetPublicKey::InitAsDefaultInstance() {
}
class HdsGetPublicKey::HasBitSetters {
 public:
  static void set_has_kid_idx(HdsGetPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_kid_sub_idx(HdsGetPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_show_display(HdsGetPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsGetPublicKey::kKidIdxFieldNumber;
const int HdsGetPublicKey::kKidSubIdxFieldNumber;
const int HdsGetPublicKey::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsGetPublicKey::HdsGetPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsGetPublicKey)
}
HdsGetPublicKey::HdsGetPublicKey(const HdsGetPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kid_idx_, &from.kid_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_display_) -
    reinterpret_cast<char*>(&kid_idx_)) + sizeof(show_display_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsGetPublicKey)
}

void HdsGetPublicKey::SharedCtor() {
  ::memset(&kid_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_display_) -
      reinterpret_cast<char*>(&kid_idx_)) + sizeof(show_display_));
}

HdsGetPublicKey::~HdsGetPublicKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsGetPublicKey)
  SharedDtor();
}

void HdsGetPublicKey::SharedDtor() {
}

void HdsGetPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsGetPublicKey& HdsGetPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsGetPublicKey_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsGetPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&kid_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_display_) -
        reinterpret_cast<char*>(&kid_idx_)) + sizeof(show_display_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsGetPublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsGetPublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 kid_idx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_kid_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 kid_sub_idx = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_kid_sub_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool show_display = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsGetPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsGetPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 kid_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_kid_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kid_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kid_sub_idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_kid_sub_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kid_sub_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsGetPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsGetPublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsGetPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 kid_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->kid_idx(), output);
  }

  // optional uint32 kid_sub_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kid_sub_idx(), output);
  }

  // optional bool show_display = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsGetPublicKey)
}

::google::protobuf::uint8* HdsGetPublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 kid_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->kid_idx(), target);
  }

  // optional uint32 kid_sub_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kid_sub_idx(), target);
  }

  // optional bool show_display = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsGetPublicKey)
  return target;
}

size_t HdsGetPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsGetPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 kid_idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kid_idx());
    }

    // optional uint32 kid_sub_idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kid_sub_idx());
    }

    // optional bool show_display = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsGetPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsGetPublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<HdsGetPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsGetPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsGetPublicKey)
    MergeFrom(*source);
  }
}

void HdsGetPublicKey::MergeFrom(const HdsGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      kid_idx_ = from.kid_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      kid_sub_idx_ = from.kid_sub_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      show_display_ = from.show_display_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsGetPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsGetPublicKey::CopyFrom(const HdsGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsGetPublicKey::IsInitialized() const {
  return true;
}

void HdsGetPublicKey::Swap(HdsGetPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsGetPublicKey::InternalSwap(HdsGetPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kid_idx_, other->kid_idx_);
  swap(kid_sub_idx_, other->kid_sub_idx_);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata HdsGetPublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsGetOwnerKey::InitAsDefaultInstance() {
}
class HdsGetOwnerKey::HasBitSetters {
 public:
  static void set_has_show_display(HdsGetOwnerKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsGetOwnerKey::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsGetOwnerKey::HdsGetOwnerKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsGetOwnerKey)
}
HdsGetOwnerKey::HdsGetOwnerKey(const HdsGetOwnerKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsGetOwnerKey)
}

void HdsGetOwnerKey::SharedCtor() {
  show_display_ = false;
}

HdsGetOwnerKey::~HdsGetOwnerKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsGetOwnerKey)
  SharedDtor();
}

void HdsGetOwnerKey::SharedDtor() {
}

void HdsGetOwnerKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsGetOwnerKey& HdsGetOwnerKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsGetOwnerKey_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsGetOwnerKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsGetOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsGetOwnerKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsGetOwnerKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool show_display = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsGetOwnerKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsGetOwnerKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool show_display = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsGetOwnerKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsGetOwnerKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsGetOwnerKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsGetOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsGetOwnerKey)
}

::google::protobuf::uint8* HdsGetOwnerKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsGetOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsGetOwnerKey)
  return target;
}

size_t HdsGetOwnerKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsGetOwnerKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool show_display = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsGetOwnerKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsGetOwnerKey)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsGetOwnerKey* source =
      ::google::protobuf::DynamicCastToGenerated<HdsGetOwnerKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsGetOwnerKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsGetOwnerKey)
    MergeFrom(*source);
  }
}

void HdsGetOwnerKey::MergeFrom(const HdsGetOwnerKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsGetOwnerKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void HdsGetOwnerKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsGetOwnerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsGetOwnerKey::CopyFrom(const HdsGetOwnerKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsGetOwnerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsGetOwnerKey::IsInitialized() const {
  return true;
}

void HdsGetOwnerKey::Swap(HdsGetOwnerKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsGetOwnerKey::InternalSwap(HdsGetOwnerKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata HdsGetOwnerKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsOwnerKey::InitAsDefaultInstance() {
}
class HdsOwnerKey::HasBitSetters {
 public:
  static void set_has_key(HdsOwnerKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsOwnerKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsOwnerKey::HdsOwnerKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsOwnerKey)
}
HdsOwnerKey::HdsOwnerKey(const HdsOwnerKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsOwnerKey)
}

void HdsOwnerKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsOwnerKey_messages_2dhds_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HdsOwnerKey::~HdsOwnerKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsOwnerKey)
  SharedDtor();
}

void HdsOwnerKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HdsOwnerKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsOwnerKey& HdsOwnerKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsOwnerKey_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsOwnerKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsOwnerKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsOwnerKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsOwnerKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsOwnerKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsOwnerKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsOwnerKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsOwnerKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsOwnerKey)
}

::google::protobuf::uint8* HdsOwnerKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsOwnerKey)
  return target;
}

size_t HdsOwnerKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsOwnerKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsOwnerKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsOwnerKey)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsOwnerKey* source =
      ::google::protobuf::DynamicCastToGenerated<HdsOwnerKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsOwnerKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsOwnerKey)
    MergeFrom(*source);
  }
}

void HdsOwnerKey::MergeFrom(const HdsOwnerKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsOwnerKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _has_bits_[0] |= 0x00000001u;
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void HdsOwnerKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsOwnerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsOwnerKey::CopyFrom(const HdsOwnerKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsOwnerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsOwnerKey::IsInitialized() const {
  return true;
}

void HdsOwnerKey::Swap(HdsOwnerKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsOwnerKey::InternalSwap(HdsOwnerKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata HdsOwnerKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsGenerateRangeproof::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsGenerateRangeproof_default_instance_._instance.get_mutable()->cid_ = const_cast< ::hw::trezor::messages::hds::HdsCoinID*>(
      ::hw::trezor::messages::hds::HdsCoinID::internal_default_instance());
  ::hw::trezor::messages::hds::_HdsGenerateRangeproof_default_instance_._instance.get_mutable()->pt0_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
  ::hw::trezor::messages::hds::_HdsGenerateRangeproof_default_instance_._instance.get_mutable()->pt1_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
}
class HdsGenerateRangeproof::HasBitSetters {
 public:
  static const ::hw::trezor::messages::hds::HdsCoinID& cid(const HdsGenerateRangeproof* msg);
  static void set_has_cid(HdsGenerateRangeproof* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& pt0(const HdsGenerateRangeproof* msg);
  static void set_has_pt0(HdsGenerateRangeproof* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& pt1(const HdsGenerateRangeproof* msg);
  static void set_has_pt1(HdsGenerateRangeproof* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_extra_sk0(HdsGenerateRangeproof* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_extra_sk1(HdsGenerateRangeproof* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::hds::HdsCoinID&
HdsGenerateRangeproof::HasBitSetters::cid(const HdsGenerateRangeproof* msg) {
  return *msg->cid_;
}
const ::hw::trezor::messages::hds::HdsECCPoint&
HdsGenerateRangeproof::HasBitSetters::pt0(const HdsGenerateRangeproof* msg) {
  return *msg->pt0_;
}
const ::hw::trezor::messages::hds::HdsECCPoint&
HdsGenerateRangeproof::HasBitSetters::pt1(const HdsGenerateRangeproof* msg) {
  return *msg->pt1_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsGenerateRangeproof::kCidFieldNumber;
const int HdsGenerateRangeproof::kPt0FieldNumber;
const int HdsGenerateRangeproof::kPt1FieldNumber;
const int HdsGenerateRangeproof::kExtraSk0FieldNumber;
const int HdsGenerateRangeproof::kExtraSk1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsGenerateRangeproof::HdsGenerateRangeproof()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsGenerateRangeproof)
}
HdsGenerateRangeproof::HdsGenerateRangeproof(const HdsGenerateRangeproof& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_sk0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra_sk0()) {
    extra_sk0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_sk0_);
  }
  extra_sk1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra_sk1()) {
    extra_sk1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_sk1_);
  }
  if (from.has_cid()) {
    cid_ = new ::hw::trezor::messages::hds::HdsCoinID(*from.cid_);
  } else {
    cid_ = nullptr;
  }
  if (from.has_pt0()) {
    pt0_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.pt0_);
  } else {
    pt0_ = nullptr;
  }
  if (from.has_pt1()) {
    pt1_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.pt1_);
  } else {
    pt1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsGenerateRangeproof)
}

void HdsGenerateRangeproof::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsGenerateRangeproof_messages_2dhds_2eproto.base);
  extra_sk0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_sk1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pt1_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(pt1_));
}

HdsGenerateRangeproof::~HdsGenerateRangeproof() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsGenerateRangeproof)
  SharedDtor();
}

void HdsGenerateRangeproof::SharedDtor() {
  extra_sk0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_sk1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cid_;
  if (this != internal_default_instance()) delete pt0_;
  if (this != internal_default_instance()) delete pt1_;
}

void HdsGenerateRangeproof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsGenerateRangeproof& HdsGenerateRangeproof::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsGenerateRangeproof_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsGenerateRangeproof::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsGenerateRangeproof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      extra_sk0_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      extra_sk1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cid_ != nullptr);
      cid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pt0_ != nullptr);
      pt0_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pt1_ != nullptr);
      pt1_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsGenerateRangeproof::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsGenerateRangeproof*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.hds.HdsCoinID cid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsCoinID::_InternalParse;
        object = msg->mutable_cid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint pt0 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_pt0();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint pt1 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_pt1();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bytes extra_sk0 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_extra_sk0();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes extra_sk1 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_extra_sk1();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsGenerateRangeproof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsGenerateRangeproof)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.hds.HdsCoinID cid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint pt0 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pt0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint pt1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pt1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes extra_sk0 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_sk0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes extra_sk1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_sk1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsGenerateRangeproof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsGenerateRangeproof)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsGenerateRangeproof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsGenerateRangeproof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsCoinID cid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cid(this), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint pt0 = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pt0(this), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint pt1 = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pt1(this), output);
  }

  // optional bytes extra_sk0 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->extra_sk0(), output);
  }

  // optional bytes extra_sk1 = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->extra_sk1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsGenerateRangeproof)
}

::google::protobuf::uint8* HdsGenerateRangeproof::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsGenerateRangeproof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsCoinID cid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cid(this), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint pt0 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pt0(this), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint pt1 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pt1(this), target);
  }

  // optional bytes extra_sk0 = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->extra_sk0(), target);
  }

  // optional bytes extra_sk1 = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->extra_sk1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsGenerateRangeproof)
  return target;
}

size_t HdsGenerateRangeproof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsGenerateRangeproof)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes extra_sk0 = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra_sk0());
    }

    // optional bytes extra_sk1 = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra_sk1());
    }

    // optional .hw.trezor.messages.hds.HdsCoinID cid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cid_);
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint pt0 = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pt0_);
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint pt1 = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pt1_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsGenerateRangeproof::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsGenerateRangeproof)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsGenerateRangeproof* source =
      ::google::protobuf::DynamicCastToGenerated<HdsGenerateRangeproof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsGenerateRangeproof)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsGenerateRangeproof)
    MergeFrom(*source);
  }
}

void HdsGenerateRangeproof::MergeFrom(const HdsGenerateRangeproof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsGenerateRangeproof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extra_sk0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_sk0_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      extra_sk1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_sk1_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cid()->::hw::trezor::messages::hds::HdsCoinID::MergeFrom(from.cid());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pt0()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.pt0());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_pt1()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.pt1());
    }
  }
}

void HdsGenerateRangeproof::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsGenerateRangeproof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsGenerateRangeproof::CopyFrom(const HdsGenerateRangeproof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsGenerateRangeproof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsGenerateRangeproof::IsInitialized() const {
  return true;
}

void HdsGenerateRangeproof::Swap(HdsGenerateRangeproof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsGenerateRangeproof::InternalSwap(HdsGenerateRangeproof* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_sk0_.Swap(&other->extra_sk0_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extra_sk1_.Swap(&other->extra_sk1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cid_, other->cid_);
  swap(pt0_, other->pt0_);
  swap(pt1_, other->pt1_);
}

::google::protobuf::Metadata HdsGenerateRangeproof::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsRangeproofData::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsRangeproofData_default_instance_._instance.get_mutable()->pt0_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
  ::hw::trezor::messages::hds::_HdsRangeproofData_default_instance_._instance.get_mutable()->pt1_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
}
class HdsRangeproofData::HasBitSetters {
 public:
  static void set_has_data_taux(HdsRangeproofData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_successful(HdsRangeproofData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& pt0(const HdsRangeproofData* msg);
  static void set_has_pt0(HdsRangeproofData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& pt1(const HdsRangeproofData* msg);
  static void set_has_pt1(HdsRangeproofData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::hw::trezor::messages::hds::HdsECCPoint&
HdsRangeproofData::HasBitSetters::pt0(const HdsRangeproofData* msg) {
  return *msg->pt0_;
}
const ::hw::trezor::messages::hds::HdsECCPoint&
HdsRangeproofData::HasBitSetters::pt1(const HdsRangeproofData* msg) {
  return *msg->pt1_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsRangeproofData::kDataTauxFieldNumber;
const int HdsRangeproofData::kIsSuccessfulFieldNumber;
const int HdsRangeproofData::kPt0FieldNumber;
const int HdsRangeproofData::kPt1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsRangeproofData::HdsRangeproofData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsRangeproofData)
}
HdsRangeproofData::HdsRangeproofData(const HdsRangeproofData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_taux_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_taux()) {
    data_taux_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_taux_);
  }
  if (from.has_pt0()) {
    pt0_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.pt0_);
  } else {
    pt0_ = nullptr;
  }
  if (from.has_pt1()) {
    pt1_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.pt1_);
  } else {
    pt1_ = nullptr;
  }
  is_successful_ = from.is_successful_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsRangeproofData)
}

void HdsRangeproofData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsRangeproofData_messages_2dhds_2eproto.base);
  data_taux_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pt0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_successful_) -
      reinterpret_cast<char*>(&pt0_)) + sizeof(is_successful_));
}

HdsRangeproofData::~HdsRangeproofData() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsRangeproofData)
  SharedDtor();
}

void HdsRangeproofData::SharedDtor() {
  data_taux_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pt0_;
  if (this != internal_default_instance()) delete pt1_;
}

void HdsRangeproofData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsRangeproofData& HdsRangeproofData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsRangeproofData_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsRangeproofData::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsRangeproofData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_taux_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pt0_ != nullptr);
      pt0_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pt1_ != nullptr);
      pt1_->Clear();
    }
  }
  is_successful_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsRangeproofData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsRangeproofData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes data_taux = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data_taux();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_successful = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_successful(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint pt0 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_pt0();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint pt1 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_pt1();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsRangeproofData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsRangeproofData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data_taux = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_taux()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_successful = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_successful(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_successful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint pt0 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pt0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint pt1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pt1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsRangeproofData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsRangeproofData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsRangeproofData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsRangeproofData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data_taux = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data_taux(), output);
  }

  // optional bool is_successful = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_successful(), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint pt0 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pt0(this), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint pt1 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::pt1(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsRangeproofData)
}

::google::protobuf::uint8* HdsRangeproofData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsRangeproofData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data_taux = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data_taux(), target);
  }

  // optional bool is_successful = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_successful(), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint pt0 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pt0(this), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint pt1 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::pt1(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsRangeproofData)
  return target;
}

size_t HdsRangeproofData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsRangeproofData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data_taux = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_taux());
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint pt0 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pt0_);
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint pt1 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pt1_);
    }

    // optional bool is_successful = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsRangeproofData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsRangeproofData)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsRangeproofData* source =
      ::google::protobuf::DynamicCastToGenerated<HdsRangeproofData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsRangeproofData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsRangeproofData)
    MergeFrom(*source);
  }
}

void HdsRangeproofData::MergeFrom(const HdsRangeproofData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsRangeproofData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_taux_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_taux_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pt0()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.pt0());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pt1()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.pt1());
    }
    if (cached_has_bits & 0x00000008u) {
      is_successful_ = from.is_successful_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsRangeproofData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsRangeproofData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsRangeproofData::CopyFrom(const HdsRangeproofData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsRangeproofData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsRangeproofData::IsInitialized() const {
  return true;
}

void HdsRangeproofData::Swap(HdsRangeproofData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsRangeproofData::InternalSwap(HdsRangeproofData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_taux_.Swap(&other->data_taux_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pt0_, other->pt0_);
  swap(pt1_, other->pt1_);
  swap(is_successful_, other->is_successful_);
}

::google::protobuf::Metadata HdsRangeproofData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignedTransaction::InitAsDefaultInstance() {
}
class HdsSignedTransaction::HasBitSetters {
 public:
  static void set_has_signature(HdsSignedTransaction* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignedTransaction::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignedTransaction::HdsSignedTransaction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignedTransaction)
}
HdsSignedTransaction::HdsSignedTransaction(const HdsSignedTransaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignedTransaction)
}

void HdsSignedTransaction::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignedTransaction_messages_2dhds_2eproto.base);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HdsSignedTransaction::~HdsSignedTransaction() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignedTransaction)
  SharedDtor();
}

void HdsSignedTransaction::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HdsSignedTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignedTransaction& HdsSignedTransaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignedTransaction_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignedTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignedTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signature_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignedTransaction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignedTransaction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignedTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignedTransaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignedTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignedTransaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignedTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignedTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignedTransaction)
}

::google::protobuf::uint8* HdsSignedTransaction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignedTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignedTransaction)
  return target;
}

size_t HdsSignedTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignedTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes signature = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignedTransaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignedTransaction* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignedTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignedTransaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignedTransaction)
    MergeFrom(*source);
  }
}

void HdsSignedTransaction::MergeFrom(const HdsSignedTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signature()) {
    _has_bits_[0] |= 0x00000001u;
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void HdsSignedTransaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignedTransaction::CopyFrom(const HdsSignedTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignedTransaction::IsInitialized() const {
  return true;
}

void HdsSignedTransaction::Swap(HdsSignedTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignedTransaction::InternalSwap(HdsSignedTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata HdsSignedTransaction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignTransaction_HdsKernelParametersOld::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsSignTransaction_HdsKernelParametersOld_default_instance_._instance.get_mutable()->commitment_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
  ::hw::trezor::messages::hds::_HdsSignTransaction_HdsKernelParametersOld_default_instance_._instance.get_mutable()->multisig_nonce_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
  ::hw::trezor::messages::hds::_HdsSignTransaction_HdsKernelParametersOld_default_instance_._instance.get_mutable()->multisig_excess_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
}
class HdsSignTransaction_HdsKernelParametersOld::HasBitSetters {
 public:
  static void set_has_fee(HdsSignTransaction_HdsKernelParametersOld* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& commitment(const HdsSignTransaction_HdsKernelParametersOld* msg);
  static void set_has_commitment(HdsSignTransaction_HdsKernelParametersOld* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_min_height(HdsSignTransaction_HdsKernelParametersOld* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_max_height(HdsSignTransaction_HdsKernelParametersOld* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_asset_emission(HdsSignTransaction_HdsKernelParametersOld* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_hash_lock(HdsSignTransaction_HdsKernelParametersOld* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& multisig_nonce(const HdsSignTransaction_HdsKernelParametersOld* msg);
  static void set_has_multisig_nonce(HdsSignTransaction_HdsKernelParametersOld* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& multisig_excess(const HdsSignTransaction_HdsKernelParametersOld* msg);
  static void set_has_multisig_excess(HdsSignTransaction_HdsKernelParametersOld* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::hw::trezor::messages::hds::HdsECCPoint&
HdsSignTransaction_HdsKernelParametersOld::HasBitSetters::commitment(const HdsSignTransaction_HdsKernelParametersOld* msg) {
  return *msg->commitment_;
}
const ::hw::trezor::messages::hds::HdsECCPoint&
HdsSignTransaction_HdsKernelParametersOld::HasBitSetters::multisig_nonce(const HdsSignTransaction_HdsKernelParametersOld* msg) {
  return *msg->multisig_nonce_;
}
const ::hw::trezor::messages::hds::HdsECCPoint&
HdsSignTransaction_HdsKernelParametersOld::HasBitSetters::multisig_excess(const HdsSignTransaction_HdsKernelParametersOld* msg) {
  return *msg->multisig_excess_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignTransaction_HdsKernelParametersOld::kFeeFieldNumber;
const int HdsSignTransaction_HdsKernelParametersOld::kCommitmentFieldNumber;
const int HdsSignTransaction_HdsKernelParametersOld::kMinHeightFieldNumber;
const int HdsSignTransaction_HdsKernelParametersOld::kMaxHeightFieldNumber;
const int HdsSignTransaction_HdsKernelParametersOld::kAssetEmissionFieldNumber;
const int HdsSignTransaction_HdsKernelParametersOld::kHashLockFieldNumber;
const int HdsSignTransaction_HdsKernelParametersOld::kMultisigNonceFieldNumber;
const int HdsSignTransaction_HdsKernelParametersOld::kMultisigExcessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignTransaction_HdsKernelParametersOld::HdsSignTransaction_HdsKernelParametersOld()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
}
HdsSignTransaction_HdsKernelParametersOld::HdsSignTransaction_HdsKernelParametersOld(const HdsSignTransaction_HdsKernelParametersOld& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash_lock()) {
    hash_lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_lock_);
  }
  if (from.has_commitment()) {
    commitment_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.commitment_);
  } else {
    commitment_ = nullptr;
  }
  if (from.has_multisig_nonce()) {
    multisig_nonce_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.multisig_nonce_);
  } else {
    multisig_nonce_ = nullptr;
  }
  if (from.has_multisig_excess()) {
    multisig_excess_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.multisig_excess_);
  } else {
    multisig_excess_ = nullptr;
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&asset_emission_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(asset_emission_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
}

void HdsSignTransaction_HdsKernelParametersOld::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignTransaction_HdsKernelParametersOld_messages_2dhds_2eproto.base);
  hash_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&commitment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asset_emission_) -
      reinterpret_cast<char*>(&commitment_)) + sizeof(asset_emission_));
}

HdsSignTransaction_HdsKernelParametersOld::~HdsSignTransaction_HdsKernelParametersOld() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  SharedDtor();
}

void HdsSignTransaction_HdsKernelParametersOld::SharedDtor() {
  hash_lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commitment_;
  if (this != internal_default_instance()) delete multisig_nonce_;
  if (this != internal_default_instance()) delete multisig_excess_;
}

void HdsSignTransaction_HdsKernelParametersOld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignTransaction_HdsKernelParametersOld& HdsSignTransaction_HdsKernelParametersOld::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignTransaction_HdsKernelParametersOld_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignTransaction_HdsKernelParametersOld::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hash_lock_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(commitment_ != nullptr);
      commitment_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(multisig_nonce_ != nullptr);
      multisig_nonce_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(multisig_excess_ != nullptr);
      multisig_excess_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&fee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&asset_emission_) -
        reinterpret_cast<char*>(&fee_)) + sizeof(asset_emission_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignTransaction_HdsKernelParametersOld::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignTransaction_HdsKernelParametersOld*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 fee = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fee(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint commitment = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_commitment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint64 min_height = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_min_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 max_height = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_max_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint64 asset_emission = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_asset_emission(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes hash_lock = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_hash_lock();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint multisig_nonce = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_multisig_nonce();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint multisig_excess = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_multisig_excess();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignTransaction_HdsKernelParametersOld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fee = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fee(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint commitment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 min_height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_min_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_max_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 asset_emission = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_asset_emission(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &asset_emission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hash_lock = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash_lock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint multisig_nonce = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multisig_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint multisig_excess = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multisig_excess()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignTransaction_HdsKernelParametersOld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fee(), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint commitment = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::commitment(this), output);
  }

  // optional uint64 min_height = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->min_height(), output);
  }

  // optional uint64 max_height = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->max_height(), output);
  }

  // optional sint64 asset_emission = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->asset_emission(), output);
  }

  // optional bytes hash_lock = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->hash_lock(), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint multisig_nonce = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::multisig_nonce(this), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint multisig_excess = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::multisig_excess(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
}

::google::protobuf::uint8* HdsSignTransaction_HdsKernelParametersOld::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fee(), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint commitment = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::commitment(this), target);
  }

  // optional uint64 min_height = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->min_height(), target);
  }

  // optional uint64 max_height = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->max_height(), target);
  }

  // optional sint64 asset_emission = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->asset_emission(), target);
  }

  // optional bytes hash_lock = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->hash_lock(), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint multisig_nonce = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::multisig_nonce(this), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint multisig_excess = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::multisig_excess(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  return target;
}

size_t HdsSignTransaction_HdsKernelParametersOld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes hash_lock = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash_lock());
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint commitment = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *commitment_);
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint multisig_nonce = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *multisig_nonce_);
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint multisig_excess = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *multisig_excess_);
    }

    // optional uint64 fee = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee());
    }

    // optional uint64 min_height = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_height());
    }

    // optional uint64 max_height = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_height());
    }

    // optional sint64 asset_emission = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->asset_emission());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignTransaction_HdsKernelParametersOld::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignTransaction_HdsKernelParametersOld* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignTransaction_HdsKernelParametersOld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
    MergeFrom(*source);
  }
}

void HdsSignTransaction_HdsKernelParametersOld::MergeFrom(const HdsSignTransaction_HdsKernelParametersOld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hash_lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_lock_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_commitment()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.commitment());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_multisig_nonce()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.multisig_nonce());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_multisig_excess()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.multisig_excess());
    }
    if (cached_has_bits & 0x00000010u) {
      fee_ = from.fee_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_height_ = from.min_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_height_ = from.max_height_;
    }
    if (cached_has_bits & 0x00000080u) {
      asset_emission_ = from.asset_emission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsSignTransaction_HdsKernelParametersOld::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignTransaction_HdsKernelParametersOld::CopyFrom(const HdsSignTransaction_HdsKernelParametersOld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignTransaction_HdsKernelParametersOld::IsInitialized() const {
  return true;
}

void HdsSignTransaction_HdsKernelParametersOld::Swap(HdsSignTransaction_HdsKernelParametersOld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignTransaction_HdsKernelParametersOld::InternalSwap(HdsSignTransaction_HdsKernelParametersOld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hash_lock_.Swap(&other->hash_lock_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(commitment_, other->commitment_);
  swap(multisig_nonce_, other->multisig_nonce_);
  swap(multisig_excess_, other->multisig_excess_);
  swap(fee_, other->fee_);
  swap(min_height_, other->min_height_);
  swap(max_height_, other->max_height_);
  swap(asset_emission_, other->asset_emission_);
}

::google::protobuf::Metadata HdsSignTransaction_HdsKernelParametersOld::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignTransaction::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsSignTransaction_default_instance_._instance.get_mutable()->kernel_params_ = const_cast< ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld*>(
      ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld::internal_default_instance());
}
class HdsSignTransaction::HasBitSetters {
 public:
  static void set_has_offset_sk(HdsSignTransaction* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_nonce_slot(HdsSignTransaction* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld& kernel_params(const HdsSignTransaction* msg);
  static void set_has_kernel_params(HdsSignTransaction* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld&
HdsSignTransaction::HasBitSetters::kernel_params(const HdsSignTransaction* msg) {
  return *msg->kernel_params_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignTransaction::kInputsFieldNumber;
const int HdsSignTransaction::kOffsetSkFieldNumber;
const int HdsSignTransaction::kOutputsFieldNumber;
const int HdsSignTransaction::kNonceSlotFieldNumber;
const int HdsSignTransaction::kKernelParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignTransaction::HdsSignTransaction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignTransaction)
}
HdsSignTransaction::HdsSignTransaction(const HdsSignTransaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offset_sk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_offset_sk()) {
    offset_sk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offset_sk_);
  }
  if (from.has_kernel_params()) {
    kernel_params_ = new ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld(*from.kernel_params_);
  } else {
    kernel_params_ = nullptr;
  }
  nonce_slot_ = from.nonce_slot_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignTransaction)
}

void HdsSignTransaction::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignTransaction_messages_2dhds_2eproto.base);
  offset_sk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&kernel_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_slot_) -
      reinterpret_cast<char*>(&kernel_params_)) + sizeof(nonce_slot_));
}

HdsSignTransaction::~HdsSignTransaction() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignTransaction)
  SharedDtor();
}

void HdsSignTransaction::SharedDtor() {
  offset_sk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kernel_params_;
}

void HdsSignTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignTransaction& HdsSignTransaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignTransaction_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      offset_sk_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kernel_params_ != nullptr);
      kernel_params_->Clear();
    }
  }
  nonce_slot_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignTransaction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignTransaction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .hw.trezor.messages.hds.HdsKeyIDV inputs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::hds::HdsKeyIDV::_InternalParse;
          object = msg->add_inputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional bytes offset_sk = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_offset_sk();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .hw.trezor.messages.hds.HdsKeyIDV outputs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::hds::HdsKeyIDV::_InternalParse;
          object = msg->add_outputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint32 nonce_slot = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_nonce_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld kernel_params = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld::_InternalParse;
        object = msg->mutable_kernel_params();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignTransaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hw.trezor.messages.hds.HdsKeyIDV inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes offset_sk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_sk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hw.trezor.messages.hds.HdsKeyIDV outputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nonce_slot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_nonce_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld kernel_params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kernel_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignTransaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.hds.HdsKeyIDV inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->inputs(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes offset_sk = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->offset_sk(), output);
  }

  // repeated .hw.trezor.messages.hds.HdsKeyIDV outputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->outputs(static_cast<int>(i)),
      output);
  }

  // optional uint32 nonce_slot = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nonce_slot(), output);
  }

  // optional .hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld kernel_params = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::kernel_params(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignTransaction)
}

::google::protobuf::uint8* HdsSignTransaction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.hds.HdsKeyIDV inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->inputs(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes offset_sk = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->offset_sk(), target);
  }

  // repeated .hw.trezor.messages.hds.HdsKeyIDV outputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->outputs(static_cast<int>(i)), target);
  }

  // optional uint32 nonce_slot = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nonce_slot(), target);
  }

  // optional .hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld kernel_params = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::kernel_params(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignTransaction)
  return target;
}

size_t HdsSignTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.hds.HdsKeyIDV inputs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .hw.trezor.messages.hds.HdsKeyIDV outputs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes offset_sk = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_sk());
    }

    // optional .hw.trezor.messages.hds.HdsSignTransaction.HdsKernelParametersOld kernel_params = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kernel_params_);
    }

    // optional uint32 nonce_slot = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonce_slot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignTransaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignTransaction* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignTransaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignTransaction)
    MergeFrom(*source);
  }
}

void HdsSignTransaction::MergeFrom(const HdsSignTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      offset_sk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offset_sk_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kernel_params()->::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld::MergeFrom(from.kernel_params());
    }
    if (cached_has_bits & 0x00000004u) {
      nonce_slot_ = from.nonce_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsSignTransaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignTransaction::CopyFrom(const HdsSignTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignTransaction::IsInitialized() const {
  return true;
}

void HdsSignTransaction::Swap(HdsSignTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignTransaction::InternalSwap(HdsSignTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
  offset_sk_.Swap(&other->offset_sk_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kernel_params_, other->kernel_params_);
  swap(nonce_slot_, other->nonce_slot_);
}

::google::protobuf::Metadata HdsSignTransaction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsGetPKdf::InitAsDefaultInstance() {
}
class HdsGetPKdf::HasBitSetters {
 public:
  static void set_has_is_root_key(HdsGetPKdf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_child_idx(HdsGetPKdf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_show_display(HdsGetPKdf* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsGetPKdf::kIsRootKeyFieldNumber;
const int HdsGetPKdf::kChildIdxFieldNumber;
const int HdsGetPKdf::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsGetPKdf::HdsGetPKdf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsGetPKdf)
}
HdsGetPKdf::HdsGetPKdf(const HdsGetPKdf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&child_idx_, &from.child_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_display_) -
    reinterpret_cast<char*>(&child_idx_)) + sizeof(show_display_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsGetPKdf)
}

void HdsGetPKdf::SharedCtor() {
  ::memset(&child_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_display_) -
      reinterpret_cast<char*>(&child_idx_)) + sizeof(show_display_));
}

HdsGetPKdf::~HdsGetPKdf() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsGetPKdf)
  SharedDtor();
}

void HdsGetPKdf::SharedDtor() {
}

void HdsGetPKdf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsGetPKdf& HdsGetPKdf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsGetPKdf_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsGetPKdf::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsGetPKdf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&child_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_display_) -
        reinterpret_cast<char*>(&child_idx_)) + sizeof(show_display_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsGetPKdf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsGetPKdf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_root_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_root_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 child_idx = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_child_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool show_display = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsGetPKdf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsGetPKdf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_root_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_is_root_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_root_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 child_idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_child_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &child_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsGetPKdf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsGetPKdf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsGetPKdf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsGetPKdf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_root_key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_root_key(), output);
  }

  // optional uint32 child_idx = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->child_idx(), output);
  }

  // optional bool show_display = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsGetPKdf)
}

::google::protobuf::uint8* HdsGetPKdf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsGetPKdf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_root_key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_root_key(), target);
  }

  // optional uint32 child_idx = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->child_idx(), target);
  }

  // optional bool show_display = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsGetPKdf)
  return target;
}

size_t HdsGetPKdf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsGetPKdf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 child_idx = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->child_idx());
    }

    // optional bool is_root_key = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool show_display = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsGetPKdf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsGetPKdf)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsGetPKdf* source =
      ::google::protobuf::DynamicCastToGenerated<HdsGetPKdf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsGetPKdf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsGetPKdf)
    MergeFrom(*source);
  }
}

void HdsGetPKdf::MergeFrom(const HdsGetPKdf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsGetPKdf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      child_idx_ = from.child_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_root_key_ = from.is_root_key_;
    }
    if (cached_has_bits & 0x00000004u) {
      show_display_ = from.show_display_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsGetPKdf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsGetPKdf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsGetPKdf::CopyFrom(const HdsGetPKdf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsGetPKdf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsGetPKdf::IsInitialized() const {
  return true;
}

void HdsGetPKdf::Swap(HdsGetPKdf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsGetPKdf::InternalSwap(HdsGetPKdf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(child_idx_, other->child_idx_);
  swap(is_root_key_, other->is_root_key_);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata HdsGetPKdf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsPKdf::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsPKdf_default_instance_._instance.get_mutable()->cofactor_g_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
  ::hw::trezor::messages::hds::_HdsPKdf_default_instance_._instance.get_mutable()->cofactor_j_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
}
class HdsPKdf::HasBitSetters {
 public:
  static void set_has_key(HdsPKdf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& cofactor_g(const HdsPKdf* msg);
  static void set_has_cofactor_g(HdsPKdf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& cofactor_j(const HdsPKdf* msg);
  static void set_has_cofactor_j(HdsPKdf* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::hw::trezor::messages::hds::HdsECCPoint&
HdsPKdf::HasBitSetters::cofactor_g(const HdsPKdf* msg) {
  return *msg->cofactor_g_;
}
const ::hw::trezor::messages::hds::HdsECCPoint&
HdsPKdf::HasBitSetters::cofactor_j(const HdsPKdf* msg) {
  return *msg->cofactor_j_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsPKdf::kKeyFieldNumber;
const int HdsPKdf::kCofactorGFieldNumber;
const int HdsPKdf::kCofactorJFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsPKdf::HdsPKdf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsPKdf)
}
HdsPKdf::HdsPKdf(const HdsPKdf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_cofactor_g()) {
    cofactor_g_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.cofactor_g_);
  } else {
    cofactor_g_ = nullptr;
  }
  if (from.has_cofactor_j()) {
    cofactor_j_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.cofactor_j_);
  } else {
    cofactor_j_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsPKdf)
}

void HdsPKdf::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsPKdf_messages_2dhds_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cofactor_g_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cofactor_j_) -
      reinterpret_cast<char*>(&cofactor_g_)) + sizeof(cofactor_j_));
}

HdsPKdf::~HdsPKdf() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsPKdf)
  SharedDtor();
}

void HdsPKdf::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cofactor_g_;
  if (this != internal_default_instance()) delete cofactor_j_;
}

void HdsPKdf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsPKdf& HdsPKdf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsPKdf_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsPKdf::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsPKdf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cofactor_g_ != nullptr);
      cofactor_g_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cofactor_j_ != nullptr);
      cofactor_j_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsPKdf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsPKdf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint cofactor_G = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_cofactor_g();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint cofactor_J = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_cofactor_j();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsPKdf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsPKdf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint cofactor_G = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cofactor_g()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint cofactor_J = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cofactor_j()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsPKdf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsPKdf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsPKdf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsPKdf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint cofactor_G = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cofactor_g(this), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint cofactor_J = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::cofactor_j(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsPKdf)
}

::google::protobuf::uint8* HdsPKdf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsPKdf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint cofactor_G = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cofactor_g(this), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint cofactor_J = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::cofactor_j(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsPKdf)
  return target;
}

size_t HdsPKdf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsPKdf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint cofactor_G = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cofactor_g_);
    }

    // optional .hw.trezor.messages.hds.HdsECCPoint cofactor_J = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cofactor_j_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsPKdf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsPKdf)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsPKdf* source =
      ::google::protobuf::DynamicCastToGenerated<HdsPKdf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsPKdf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsPKdf)
    MergeFrom(*source);
  }
}

void HdsPKdf::MergeFrom(const HdsPKdf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsPKdf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cofactor_g()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.cofactor_g());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cofactor_j()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.cofactor_j());
    }
  }
}

void HdsPKdf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsPKdf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsPKdf::CopyFrom(const HdsPKdf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsPKdf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsPKdf::IsInitialized() const {
  return true;
}

void HdsPKdf::Swap(HdsPKdf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsPKdf::InternalSwap(HdsPKdf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cofactor_g_, other->cofactor_g_);
  swap(cofactor_j_, other->cofactor_j_);
}

::google::protobuf::Metadata HdsPKdf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsGetNumSlots::InitAsDefaultInstance() {
}
class HdsGetNumSlots::HasBitSetters {
 public:
  static void set_has_show_display(HdsGetNumSlots* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsGetNumSlots::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsGetNumSlots::HdsGetNumSlots()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsGetNumSlots)
}
HdsGetNumSlots::HdsGetNumSlots(const HdsGetNumSlots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsGetNumSlots)
}

void HdsGetNumSlots::SharedCtor() {
  show_display_ = false;
}

HdsGetNumSlots::~HdsGetNumSlots() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsGetNumSlots)
  SharedDtor();
}

void HdsGetNumSlots::SharedDtor() {
}

void HdsGetNumSlots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsGetNumSlots& HdsGetNumSlots::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsGetNumSlots_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsGetNumSlots::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsGetNumSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsGetNumSlots::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsGetNumSlots*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool show_display = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsGetNumSlots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsGetNumSlots)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool show_display = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsGetNumSlots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsGetNumSlots)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsGetNumSlots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsGetNumSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsGetNumSlots)
}

::google::protobuf::uint8* HdsGetNumSlots::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsGetNumSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsGetNumSlots)
  return target;
}

size_t HdsGetNumSlots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsGetNumSlots)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool show_display = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsGetNumSlots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsGetNumSlots)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsGetNumSlots* source =
      ::google::protobuf::DynamicCastToGenerated<HdsGetNumSlots>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsGetNumSlots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsGetNumSlots)
    MergeFrom(*source);
  }
}

void HdsGetNumSlots::MergeFrom(const HdsGetNumSlots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsGetNumSlots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void HdsGetNumSlots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsGetNumSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsGetNumSlots::CopyFrom(const HdsGetNumSlots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsGetNumSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsGetNumSlots::IsInitialized() const {
  return true;
}

void HdsGetNumSlots::Swap(HdsGetNumSlots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsGetNumSlots::InternalSwap(HdsGetNumSlots* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata HdsGetNumSlots::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsNumSlots::InitAsDefaultInstance() {
}
class HdsNumSlots::HasBitSetters {
 public:
  static void set_has_num_slots(HdsNumSlots* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsNumSlots::kNumSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsNumSlots::HdsNumSlots()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsNumSlots)
}
HdsNumSlots::HdsNumSlots(const HdsNumSlots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_slots_ = from.num_slots_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsNumSlots)
}

void HdsNumSlots::SharedCtor() {
  num_slots_ = 0u;
}

HdsNumSlots::~HdsNumSlots() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsNumSlots)
  SharedDtor();
}

void HdsNumSlots::SharedDtor() {
}

void HdsNumSlots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsNumSlots& HdsNumSlots::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsNumSlots_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsNumSlots::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsNumSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_slots_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsNumSlots::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsNumSlots*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 num_slots = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_num_slots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsNumSlots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsNumSlots)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_slots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_num_slots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsNumSlots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsNumSlots)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsNumSlots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsNumSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_slots = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_slots(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsNumSlots)
}

::google::protobuf::uint8* HdsNumSlots::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsNumSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_slots = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_slots(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsNumSlots)
  return target;
}

size_t HdsNumSlots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsNumSlots)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 num_slots = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_slots());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsNumSlots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsNumSlots)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsNumSlots* source =
      ::google::protobuf::DynamicCastToGenerated<HdsNumSlots>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsNumSlots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsNumSlots)
    MergeFrom(*source);
  }
}

void HdsNumSlots::MergeFrom(const HdsNumSlots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsNumSlots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num_slots()) {
    set_num_slots(from.num_slots());
  }
}

void HdsNumSlots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsNumSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsNumSlots::CopyFrom(const HdsNumSlots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsNumSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsNumSlots::IsInitialized() const {
  return true;
}

void HdsNumSlots::Swap(HdsNumSlots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsNumSlots::InternalSwap(HdsNumSlots* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_slots_, other->num_slots_);
}

::google::protobuf::Metadata HdsNumSlots::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsTxCommon_HdsKernelParameters::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsTxCommon_HdsKernelParameters_default_instance_._instance.get_mutable()->commitment_ = const_cast< ::hw::trezor::messages::hds::HdsECCPoint*>(
      ::hw::trezor::messages::hds::HdsECCPoint::internal_default_instance());
  ::hw::trezor::messages::hds::_HdsTxCommon_HdsKernelParameters_default_instance_._instance.get_mutable()->signature_ = const_cast< ::hw::trezor::messages::hds::HdsSignature*>(
      ::hw::trezor::messages::hds::HdsSignature::internal_default_instance());
}
class HdsTxCommon_HdsKernelParameters::HasBitSetters {
 public:
  static void set_has_fee(HdsTxCommon_HdsKernelParameters* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_min_height(HdsTxCommon_HdsKernelParameters* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_max_height(HdsTxCommon_HdsKernelParameters* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::hw::trezor::messages::hds::HdsECCPoint& commitment(const HdsTxCommon_HdsKernelParameters* msg);
  static void set_has_commitment(HdsTxCommon_HdsKernelParameters* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::hds::HdsSignature& signature(const HdsTxCommon_HdsKernelParameters* msg);
  static void set_has_signature(HdsTxCommon_HdsKernelParameters* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::hds::HdsECCPoint&
HdsTxCommon_HdsKernelParameters::HasBitSetters::commitment(const HdsTxCommon_HdsKernelParameters* msg) {
  return *msg->commitment_;
}
const ::hw::trezor::messages::hds::HdsSignature&
HdsTxCommon_HdsKernelParameters::HasBitSetters::signature(const HdsTxCommon_HdsKernelParameters* msg) {
  return *msg->signature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsTxCommon_HdsKernelParameters::kFeeFieldNumber;
const int HdsTxCommon_HdsKernelParameters::kMinHeightFieldNumber;
const int HdsTxCommon_HdsKernelParameters::kMaxHeightFieldNumber;
const int HdsTxCommon_HdsKernelParameters::kCommitmentFieldNumber;
const int HdsTxCommon_HdsKernelParameters::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsTxCommon_HdsKernelParameters::HdsTxCommon_HdsKernelParameters()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
}
HdsTxCommon_HdsKernelParameters::HdsTxCommon_HdsKernelParameters(const HdsTxCommon_HdsKernelParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_commitment()) {
    commitment_ = new ::hw::trezor::messages::hds::HdsECCPoint(*from.commitment_);
  } else {
    commitment_ = nullptr;
  }
  if (from.has_signature()) {
    signature_ = new ::hw::trezor::messages::hds::HdsSignature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_height_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(max_height_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
}

void HdsTxCommon_HdsKernelParameters::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsTxCommon_HdsKernelParameters_messages_2dhds_2eproto.base);
  ::memset(&commitment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_height_) -
      reinterpret_cast<char*>(&commitment_)) + sizeof(max_height_));
}

HdsTxCommon_HdsKernelParameters::~HdsTxCommon_HdsKernelParameters() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  SharedDtor();
}

void HdsTxCommon_HdsKernelParameters::SharedDtor() {
  if (this != internal_default_instance()) delete commitment_;
  if (this != internal_default_instance()) delete signature_;
}

void HdsTxCommon_HdsKernelParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsTxCommon_HdsKernelParameters& HdsTxCommon_HdsKernelParameters::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsTxCommon_HdsKernelParameters_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsTxCommon_HdsKernelParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commitment_ != nullptr);
      commitment_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&fee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_height_) -
        reinterpret_cast<char*>(&fee_)) + sizeof(max_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsTxCommon_HdsKernelParameters::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsTxCommon_HdsKernelParameters*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 fee = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fee(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 min_height = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_min_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 max_height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_max_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.hds.HdsECCPoint commitment = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsECCPoint::_InternalParse;
        object = msg->mutable_commitment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.hds.HdsSignature signature = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsSignature::_InternalParse;
        object = msg->mutable_signature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsTxCommon_HdsKernelParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fee = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fee(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 min_height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_min_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_max_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsECCPoint commitment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsSignature signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsTxCommon_HdsKernelParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fee(), output);
  }

  // optional uint64 min_height = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->min_height(), output);
  }

  // optional uint64 max_height = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_height(), output);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint commitment = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::commitment(this), output);
  }

  // optional .hw.trezor.messages.hds.HdsSignature signature = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::signature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
}

::google::protobuf::uint8* HdsTxCommon_HdsKernelParameters::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fee(), target);
  }

  // optional uint64 min_height = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->min_height(), target);
  }

  // optional uint64 max_height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->max_height(), target);
  }

  // optional .hw.trezor.messages.hds.HdsECCPoint commitment = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::commitment(this), target);
  }

  // optional .hw.trezor.messages.hds.HdsSignature signature = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::signature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  return target;
}

size_t HdsTxCommon_HdsKernelParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .hw.trezor.messages.hds.HdsECCPoint commitment = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *commitment_);
    }

    // optional .hw.trezor.messages.hds.HdsSignature signature = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional uint64 fee = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee());
    }

    // optional uint64 min_height = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_height());
    }

    // optional uint64 max_height = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsTxCommon_HdsKernelParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsTxCommon_HdsKernelParameters* source =
      ::google::protobuf::DynamicCastToGenerated<HdsTxCommon_HdsKernelParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
    MergeFrom(*source);
  }
}

void HdsTxCommon_HdsKernelParameters::MergeFrom(const HdsTxCommon_HdsKernelParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_commitment()->::hw::trezor::messages::hds::HdsECCPoint::MergeFrom(from.commitment());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::hw::trezor::messages::hds::HdsSignature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000004u) {
      fee_ = from.fee_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_height_ = from.min_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_height_ = from.max_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsTxCommon_HdsKernelParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsTxCommon_HdsKernelParameters::CopyFrom(const HdsTxCommon_HdsKernelParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsTxCommon_HdsKernelParameters::IsInitialized() const {
  return true;
}

void HdsTxCommon_HdsKernelParameters::Swap(HdsTxCommon_HdsKernelParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsTxCommon_HdsKernelParameters::InternalSwap(HdsTxCommon_HdsKernelParameters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commitment_, other->commitment_);
  swap(signature_, other->signature_);
  swap(fee_, other->fee_);
  swap(min_height_, other->min_height_);
  swap(max_height_, other->max_height_);
}

::google::protobuf::Metadata HdsTxCommon_HdsKernelParameters::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsTxCommon::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsTxCommon_default_instance_._instance.get_mutable()->kernel_params_ = const_cast< ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters*>(
      ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters::internal_default_instance());
}
class HdsTxCommon::HasBitSetters {
 public:
  static void set_has_offset_sk(HdsTxCommon* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters& kernel_params(const HdsTxCommon* msg);
  static void set_has_kernel_params(HdsTxCommon* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters&
HdsTxCommon::HasBitSetters::kernel_params(const HdsTxCommon* msg) {
  return *msg->kernel_params_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsTxCommon::kInputsFieldNumber;
const int HdsTxCommon::kOffsetSkFieldNumber;
const int HdsTxCommon::kOutputsFieldNumber;
const int HdsTxCommon::kKernelParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsTxCommon::HdsTxCommon()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsTxCommon)
}
HdsTxCommon::HdsTxCommon(const HdsTxCommon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offset_sk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_offset_sk()) {
    offset_sk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offset_sk_);
  }
  if (from.has_kernel_params()) {
    kernel_params_ = new ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters(*from.kernel_params_);
  } else {
    kernel_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsTxCommon)
}

void HdsTxCommon::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsTxCommon_messages_2dhds_2eproto.base);
  offset_sk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kernel_params_ = nullptr;
}

HdsTxCommon::~HdsTxCommon() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsTxCommon)
  SharedDtor();
}

void HdsTxCommon::SharedDtor() {
  offset_sk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kernel_params_;
}

void HdsTxCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsTxCommon& HdsTxCommon::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsTxCommon_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsTxCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsTxCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      offset_sk_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kernel_params_ != nullptr);
      kernel_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsTxCommon::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsTxCommon*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .hw.trezor.messages.hds.HdsCoinID inputs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::hds::HdsCoinID::_InternalParse;
          object = msg->add_inputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional bytes offset_sk = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_offset_sk();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .hw.trezor.messages.hds.HdsCoinID outputs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::hds::HdsCoinID::_InternalParse;
          object = msg->add_outputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional .hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters kernel_params = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters::_InternalParse;
        object = msg->mutable_kernel_params();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsTxCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsTxCommon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hw.trezor.messages.hds.HdsCoinID inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes offset_sk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_sk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hw.trezor.messages.hds.HdsCoinID outputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters kernel_params = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kernel_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsTxCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsTxCommon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsTxCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsTxCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.hds.HdsCoinID inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->inputs(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes offset_sk = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->offset_sk(), output);
  }

  // repeated .hw.trezor.messages.hds.HdsCoinID outputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->outputs(static_cast<int>(i)),
      output);
  }

  // optional .hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters kernel_params = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::kernel_params(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsTxCommon)
}

::google::protobuf::uint8* HdsTxCommon::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsTxCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.hds.HdsCoinID inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->inputs(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes offset_sk = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->offset_sk(), target);
  }

  // repeated .hw.trezor.messages.hds.HdsCoinID outputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->outputs(static_cast<int>(i)), target);
  }

  // optional .hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters kernel_params = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::kernel_params(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsTxCommon)
  return target;
}

size_t HdsTxCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsTxCommon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.hds.HdsCoinID inputs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .hw.trezor.messages.hds.HdsCoinID outputs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes offset_sk = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->offset_sk());
    }

    // optional .hw.trezor.messages.hds.HdsTxCommon.HdsKernelParameters kernel_params = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kernel_params_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsTxCommon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsTxCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsTxCommon* source =
      ::google::protobuf::DynamicCastToGenerated<HdsTxCommon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsTxCommon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsTxCommon)
    MergeFrom(*source);
  }
}

void HdsTxCommon::MergeFrom(const HdsTxCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsTxCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      offset_sk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offset_sk_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kernel_params()->::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters::MergeFrom(from.kernel_params());
    }
  }
}

void HdsTxCommon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsTxCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsTxCommon::CopyFrom(const HdsTxCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsTxCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsTxCommon::IsInitialized() const {
  return true;
}

void HdsTxCommon::Swap(HdsTxCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsTxCommon::InternalSwap(HdsTxCommon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
  offset_sk_.Swap(&other->offset_sk_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kernel_params_, other->kernel_params_);
}

::google::protobuf::Metadata HdsTxCommon::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsTxMutualInfo::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsTxMutualInfo_default_instance_._instance.get_mutable()->payment_proof_signature_ = const_cast< ::hw::trezor::messages::hds::HdsSignature*>(
      ::hw::trezor::messages::hds::HdsSignature::internal_default_instance());
}
class HdsTxMutualInfo::HasBitSetters {
 public:
  static void set_has_peer(HdsTxMutualInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_wallet_identity_key(HdsTxMutualInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::hw::trezor::messages::hds::HdsSignature& payment_proof_signature(const HdsTxMutualInfo* msg);
  static void set_has_payment_proof_signature(HdsTxMutualInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::hds::HdsSignature&
HdsTxMutualInfo::HasBitSetters::payment_proof_signature(const HdsTxMutualInfo* msg) {
  return *msg->payment_proof_signature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsTxMutualInfo::kPeerFieldNumber;
const int HdsTxMutualInfo::kWalletIdentityKeyFieldNumber;
const int HdsTxMutualInfo::kPaymentProofSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsTxMutualInfo::HdsTxMutualInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsTxMutualInfo)
}
HdsTxMutualInfo::HdsTxMutualInfo(const HdsTxMutualInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer()) {
    peer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_);
  }
  if (from.has_payment_proof_signature()) {
    payment_proof_signature_ = new ::hw::trezor::messages::hds::HdsSignature(*from.payment_proof_signature_);
  } else {
    payment_proof_signature_ = nullptr;
  }
  wallet_identity_key_ = from.wallet_identity_key_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsTxMutualInfo)
}

void HdsTxMutualInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsTxMutualInfo_messages_2dhds_2eproto.base);
  peer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&payment_proof_signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wallet_identity_key_) -
      reinterpret_cast<char*>(&payment_proof_signature_)) + sizeof(wallet_identity_key_));
}

HdsTxMutualInfo::~HdsTxMutualInfo() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsTxMutualInfo)
  SharedDtor();
}

void HdsTxMutualInfo::SharedDtor() {
  peer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete payment_proof_signature_;
}

void HdsTxMutualInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsTxMutualInfo& HdsTxMutualInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsTxMutualInfo_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsTxMutualInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsTxMutualInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      peer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(payment_proof_signature_ != nullptr);
      payment_proof_signature_->Clear();
    }
  }
  wallet_identity_key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsTxMutualInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsTxMutualInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes peer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_peer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 wallet_identity_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_wallet_identity_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.hds.HdsSignature payment_proof_signature = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsSignature::_InternalParse;
        object = msg->mutable_payment_proof_signature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsTxMutualInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsTxMutualInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 wallet_identity_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_wallet_identity_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wallet_identity_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsSignature payment_proof_signature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_payment_proof_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsTxMutualInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsTxMutualInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsTxMutualInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsTxMutualInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes peer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->peer(), output);
  }

  // optional uint64 wallet_identity_key = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->wallet_identity_key(), output);
  }

  // optional .hw.trezor.messages.hds.HdsSignature payment_proof_signature = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::payment_proof_signature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsTxMutualInfo)
}

::google::protobuf::uint8* HdsTxMutualInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsTxMutualInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes peer = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->peer(), target);
  }

  // optional uint64 wallet_identity_key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->wallet_identity_key(), target);
  }

  // optional .hw.trezor.messages.hds.HdsSignature payment_proof_signature = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::payment_proof_signature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsTxMutualInfo)
  return target;
}

size_t HdsTxMutualInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsTxMutualInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes peer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->peer());
    }

    // optional .hw.trezor.messages.hds.HdsSignature payment_proof_signature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payment_proof_signature_);
    }

    // optional uint64 wallet_identity_key = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wallet_identity_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsTxMutualInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsTxMutualInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsTxMutualInfo* source =
      ::google::protobuf::DynamicCastToGenerated<HdsTxMutualInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsTxMutualInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsTxMutualInfo)
    MergeFrom(*source);
  }
}

void HdsTxMutualInfo::MergeFrom(const HdsTxMutualInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsTxMutualInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      peer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_payment_proof_signature()->::hw::trezor::messages::hds::HdsSignature::MergeFrom(from.payment_proof_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      wallet_identity_key_ = from.wallet_identity_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsTxMutualInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsTxMutualInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsTxMutualInfo::CopyFrom(const HdsTxMutualInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsTxMutualInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsTxMutualInfo::IsInitialized() const {
  return true;
}

void HdsTxMutualInfo::Swap(HdsTxMutualInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsTxMutualInfo::InternalSwap(HdsTxMutualInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  peer_.Swap(&other->peer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payment_proof_signature_, other->payment_proof_signature_);
  swap(wallet_identity_key_, other->wallet_identity_key_);
}

::google::protobuf::Metadata HdsTxMutualInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignTransactionSend::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsSignTransactionSend_default_instance_._instance.get_mutable()->tx_common_ = const_cast< ::hw::trezor::messages::hds::HdsTxCommon*>(
      ::hw::trezor::messages::hds::HdsTxCommon::internal_default_instance());
  ::hw::trezor::messages::hds::_HdsSignTransactionSend_default_instance_._instance.get_mutable()->tx_mutual_info_ = const_cast< ::hw::trezor::messages::hds::HdsTxMutualInfo*>(
      ::hw::trezor::messages::hds::HdsTxMutualInfo::internal_default_instance());
}
class HdsSignTransactionSend::HasBitSetters {
 public:
  static const ::hw::trezor::messages::hds::HdsTxCommon& tx_common(const HdsSignTransactionSend* msg);
  static void set_has_tx_common(HdsSignTransactionSend* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::hw::trezor::messages::hds::HdsTxMutualInfo& tx_mutual_info(const HdsSignTransactionSend* msg);
  static void set_has_tx_mutual_info(HdsSignTransactionSend* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_nonce_slot(HdsSignTransactionSend* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_user_agreement(HdsSignTransactionSend* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::hds::HdsTxCommon&
HdsSignTransactionSend::HasBitSetters::tx_common(const HdsSignTransactionSend* msg) {
  return *msg->tx_common_;
}
const ::hw::trezor::messages::hds::HdsTxMutualInfo&
HdsSignTransactionSend::HasBitSetters::tx_mutual_info(const HdsSignTransactionSend* msg) {
  return *msg->tx_mutual_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignTransactionSend::kTxCommonFieldNumber;
const int HdsSignTransactionSend::kTxMutualInfoFieldNumber;
const int HdsSignTransactionSend::kNonceSlotFieldNumber;
const int HdsSignTransactionSend::kUserAgreementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignTransactionSend::HdsSignTransactionSend()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignTransactionSend)
}
HdsSignTransactionSend::HdsSignTransactionSend(const HdsSignTransactionSend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_agreement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_agreement()) {
    user_agreement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agreement_);
  }
  if (from.has_tx_common()) {
    tx_common_ = new ::hw::trezor::messages::hds::HdsTxCommon(*from.tx_common_);
  } else {
    tx_common_ = nullptr;
  }
  if (from.has_tx_mutual_info()) {
    tx_mutual_info_ = new ::hw::trezor::messages::hds::HdsTxMutualInfo(*from.tx_mutual_info_);
  } else {
    tx_mutual_info_ = nullptr;
  }
  nonce_slot_ = from.nonce_slot_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignTransactionSend)
}

void HdsSignTransactionSend::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignTransactionSend_messages_2dhds_2eproto.base);
  user_agreement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tx_common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_slot_) -
      reinterpret_cast<char*>(&tx_common_)) + sizeof(nonce_slot_));
}

HdsSignTransactionSend::~HdsSignTransactionSend() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignTransactionSend)
  SharedDtor();
}

void HdsSignTransactionSend::SharedDtor() {
  user_agreement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tx_common_;
  if (this != internal_default_instance()) delete tx_mutual_info_;
}

void HdsSignTransactionSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignTransactionSend& HdsSignTransactionSend::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignTransactionSend_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignTransactionSend::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignTransactionSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_agreement_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tx_common_ != nullptr);
      tx_common_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tx_mutual_info_ != nullptr);
      tx_mutual_info_->Clear();
    }
  }
  nonce_slot_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignTransactionSend::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignTransactionSend*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsTxCommon::_InternalParse;
        object = msg->mutable_tx_common();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.hds.HdsTxMutualInfo tx_mutual_info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsTxMutualInfo::_InternalParse;
        object = msg->mutable_tx_mutual_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 nonce_slot = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_nonce_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes user_agreement = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_user_agreement();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignTransactionSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignTransactionSend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsTxMutualInfo tx_mutual_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_mutual_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nonce_slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_nonce_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes user_agreement = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_agreement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignTransactionSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignTransactionSend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignTransactionSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignTransactionSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tx_common(this), output);
  }

  // optional .hw.trezor.messages.hds.HdsTxMutualInfo tx_mutual_info = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tx_mutual_info(this), output);
  }

  // optional uint32 nonce_slot = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nonce_slot(), output);
  }

  // optional bytes user_agreement = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->user_agreement(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignTransactionSend)
}

::google::protobuf::uint8* HdsSignTransactionSend::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignTransactionSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tx_common(this), target);
  }

  // optional .hw.trezor.messages.hds.HdsTxMutualInfo tx_mutual_info = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tx_mutual_info(this), target);
  }

  // optional uint32 nonce_slot = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nonce_slot(), target);
  }

  // optional bytes user_agreement = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->user_agreement(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignTransactionSend)
  return target;
}

size_t HdsSignTransactionSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignTransactionSend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes user_agreement = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_agreement());
    }

    // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tx_common_);
    }

    // optional .hw.trezor.messages.hds.HdsTxMutualInfo tx_mutual_info = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tx_mutual_info_);
    }

    // optional uint32 nonce_slot = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonce_slot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignTransactionSend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionSend)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignTransactionSend* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignTransactionSend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignTransactionSend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignTransactionSend)
    MergeFrom(*source);
  }
}

void HdsSignTransactionSend::MergeFrom(const HdsSignTransactionSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      user_agreement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agreement_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tx_common()->::hw::trezor::messages::hds::HdsTxCommon::MergeFrom(from.tx_common());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tx_mutual_info()->::hw::trezor::messages::hds::HdsTxMutualInfo::MergeFrom(from.tx_mutual_info());
    }
    if (cached_has_bits & 0x00000008u) {
      nonce_slot_ = from.nonce_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HdsSignTransactionSend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignTransactionSend::CopyFrom(const HdsSignTransactionSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignTransactionSend::IsInitialized() const {
  return true;
}

void HdsSignTransactionSend::Swap(HdsSignTransactionSend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignTransactionSend::InternalSwap(HdsSignTransactionSend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_agreement_.Swap(&other->user_agreement_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tx_common_, other->tx_common_);
  swap(tx_mutual_info_, other->tx_mutual_info_);
  swap(nonce_slot_, other->nonce_slot_);
}

::google::protobuf::Metadata HdsSignTransactionSend::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignTransactionSendResult::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsSignTransactionSendResult_default_instance_._instance.get_mutable()->tx_ = const_cast< ::hw::trezor::messages::hds::HdsSignTransactionSend*>(
      ::hw::trezor::messages::hds::HdsSignTransactionSend::internal_default_instance());
}
class HdsSignTransactionSendResult::HasBitSetters {
 public:
  static const ::hw::trezor::messages::hds::HdsSignTransactionSend& tx(const HdsSignTransactionSendResult* msg);
  static void set_has_tx(HdsSignTransactionSendResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::hds::HdsSignTransactionSend&
HdsSignTransactionSendResult::HasBitSetters::tx(const HdsSignTransactionSendResult* msg) {
  return *msg->tx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignTransactionSendResult::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignTransactionSendResult::HdsSignTransactionSendResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignTransactionSendResult)
}
HdsSignTransactionSendResult::HdsSignTransactionSendResult(const HdsSignTransactionSendResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tx()) {
    tx_ = new ::hw::trezor::messages::hds::HdsSignTransactionSend(*from.tx_);
  } else {
    tx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignTransactionSendResult)
}

void HdsSignTransactionSendResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignTransactionSendResult_messages_2dhds_2eproto.base);
  tx_ = nullptr;
}

HdsSignTransactionSendResult::~HdsSignTransactionSendResult() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  SharedDtor();
}

void HdsSignTransactionSendResult::SharedDtor() {
  if (this != internal_default_instance()) delete tx_;
}

void HdsSignTransactionSendResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignTransactionSendResult& HdsSignTransactionSendResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignTransactionSendResult_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignTransactionSendResult::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tx_ != nullptr);
    tx_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignTransactionSendResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignTransactionSendResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.hds.HdsSignTransactionSend tx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsSignTransactionSend::_InternalParse;
        object = msg->mutable_tx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignTransactionSendResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.hds.HdsSignTransactionSend tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignTransactionSendResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsSignTransactionSend tx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tx(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignTransactionSendResult)
}

::google::protobuf::uint8* HdsSignTransactionSendResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsSignTransactionSend tx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tx(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  return target;
}

size_t HdsSignTransactionSendResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.hds.HdsSignTransactionSend tx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignTransactionSendResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignTransactionSendResult* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignTransactionSendResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignTransactionSendResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignTransactionSendResult)
    MergeFrom(*source);
  }
}

void HdsSignTransactionSendResult::MergeFrom(const HdsSignTransactionSendResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx()) {
    mutable_tx()->::hw::trezor::messages::hds::HdsSignTransactionSend::MergeFrom(from.tx());
  }
}

void HdsSignTransactionSendResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignTransactionSendResult::CopyFrom(const HdsSignTransactionSendResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionSendResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignTransactionSendResult::IsInitialized() const {
  return true;
}

void HdsSignTransactionSendResult::Swap(HdsSignTransactionSendResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignTransactionSendResult::InternalSwap(HdsSignTransactionSendResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tx_, other->tx_);
}

::google::protobuf::Metadata HdsSignTransactionSendResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignTransactionReceive::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsSignTransactionReceive_default_instance_._instance.get_mutable()->tx_common_ = const_cast< ::hw::trezor::messages::hds::HdsTxCommon*>(
      ::hw::trezor::messages::hds::HdsTxCommon::internal_default_instance());
  ::hw::trezor::messages::hds::_HdsSignTransactionReceive_default_instance_._instance.get_mutable()->tx_mutual_info_ = const_cast< ::hw::trezor::messages::hds::HdsTxMutualInfo*>(
      ::hw::trezor::messages::hds::HdsTxMutualInfo::internal_default_instance());
}
class HdsSignTransactionReceive::HasBitSetters {
 public:
  static const ::hw::trezor::messages::hds::HdsTxCommon& tx_common(const HdsSignTransactionReceive* msg);
  static void set_has_tx_common(HdsSignTransactionReceive* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::hds::HdsTxMutualInfo& tx_mutual_info(const HdsSignTransactionReceive* msg);
  static void set_has_tx_mutual_info(HdsSignTransactionReceive* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::hds::HdsTxCommon&
HdsSignTransactionReceive::HasBitSetters::tx_common(const HdsSignTransactionReceive* msg) {
  return *msg->tx_common_;
}
const ::hw::trezor::messages::hds::HdsTxMutualInfo&
HdsSignTransactionReceive::HasBitSetters::tx_mutual_info(const HdsSignTransactionReceive* msg) {
  return *msg->tx_mutual_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignTransactionReceive::kTxCommonFieldNumber;
const int HdsSignTransactionReceive::kTxMutualInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignTransactionReceive::HdsSignTransactionReceive()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignTransactionReceive)
}
HdsSignTransactionReceive::HdsSignTransactionReceive(const HdsSignTransactionReceive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tx_common()) {
    tx_common_ = new ::hw::trezor::messages::hds::HdsTxCommon(*from.tx_common_);
  } else {
    tx_common_ = nullptr;
  }
  if (from.has_tx_mutual_info()) {
    tx_mutual_info_ = new ::hw::trezor::messages::hds::HdsTxMutualInfo(*from.tx_mutual_info_);
  } else {
    tx_mutual_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignTransactionReceive)
}

void HdsSignTransactionReceive::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignTransactionReceive_messages_2dhds_2eproto.base);
  ::memset(&tx_common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_mutual_info_) -
      reinterpret_cast<char*>(&tx_common_)) + sizeof(tx_mutual_info_));
}

HdsSignTransactionReceive::~HdsSignTransactionReceive() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignTransactionReceive)
  SharedDtor();
}

void HdsSignTransactionReceive::SharedDtor() {
  if (this != internal_default_instance()) delete tx_common_;
  if (this != internal_default_instance()) delete tx_mutual_info_;
}

void HdsSignTransactionReceive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignTransactionReceive& HdsSignTransactionReceive::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignTransactionReceive_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignTransactionReceive::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignTransactionReceive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tx_common_ != nullptr);
      tx_common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tx_mutual_info_ != nullptr);
      tx_mutual_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignTransactionReceive::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignTransactionReceive*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsTxCommon::_InternalParse;
        object = msg->mutable_tx_common();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.hds.HdsTxMutualInfo tx_mutual_info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsTxMutualInfo::_InternalParse;
        object = msg->mutable_tx_mutual_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignTransactionReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignTransactionReceive)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.hds.HdsTxMutualInfo tx_mutual_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_mutual_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignTransactionReceive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignTransactionReceive)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignTransactionReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignTransactionReceive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tx_common(this), output);
  }

  // optional .hw.trezor.messages.hds.HdsTxMutualInfo tx_mutual_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tx_mutual_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignTransactionReceive)
}

::google::protobuf::uint8* HdsSignTransactionReceive::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignTransactionReceive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tx_common(this), target);
  }

  // optional .hw.trezor.messages.hds.HdsTxMutualInfo tx_mutual_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tx_mutual_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignTransactionReceive)
  return target;
}

size_t HdsSignTransactionReceive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignTransactionReceive)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tx_common_);
    }

    // optional .hw.trezor.messages.hds.HdsTxMutualInfo tx_mutual_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tx_mutual_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignTransactionReceive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionReceive)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignTransactionReceive* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignTransactionReceive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignTransactionReceive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignTransactionReceive)
    MergeFrom(*source);
  }
}

void HdsSignTransactionReceive::MergeFrom(const HdsSignTransactionReceive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionReceive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tx_common()->::hw::trezor::messages::hds::HdsTxCommon::MergeFrom(from.tx_common());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tx_mutual_info()->::hw::trezor::messages::hds::HdsTxMutualInfo::MergeFrom(from.tx_mutual_info());
    }
  }
}

void HdsSignTransactionReceive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionReceive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignTransactionReceive::CopyFrom(const HdsSignTransactionReceive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionReceive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignTransactionReceive::IsInitialized() const {
  return true;
}

void HdsSignTransactionReceive::Swap(HdsSignTransactionReceive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignTransactionReceive::InternalSwap(HdsSignTransactionReceive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tx_common_, other->tx_common_);
  swap(tx_mutual_info_, other->tx_mutual_info_);
}

::google::protobuf::Metadata HdsSignTransactionReceive::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignTransactionReceiveResult::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsSignTransactionReceiveResult_default_instance_._instance.get_mutable()->tx_ = const_cast< ::hw::trezor::messages::hds::HdsSignTransactionReceive*>(
      ::hw::trezor::messages::hds::HdsSignTransactionReceive::internal_default_instance());
}
class HdsSignTransactionReceiveResult::HasBitSetters {
 public:
  static const ::hw::trezor::messages::hds::HdsSignTransactionReceive& tx(const HdsSignTransactionReceiveResult* msg);
  static void set_has_tx(HdsSignTransactionReceiveResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::hds::HdsSignTransactionReceive&
HdsSignTransactionReceiveResult::HasBitSetters::tx(const HdsSignTransactionReceiveResult* msg) {
  return *msg->tx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignTransactionReceiveResult::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignTransactionReceiveResult::HdsSignTransactionReceiveResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
}
HdsSignTransactionReceiveResult::HdsSignTransactionReceiveResult(const HdsSignTransactionReceiveResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tx()) {
    tx_ = new ::hw::trezor::messages::hds::HdsSignTransactionReceive(*from.tx_);
  } else {
    tx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
}

void HdsSignTransactionReceiveResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignTransactionReceiveResult_messages_2dhds_2eproto.base);
  tx_ = nullptr;
}

HdsSignTransactionReceiveResult::~HdsSignTransactionReceiveResult() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  SharedDtor();
}

void HdsSignTransactionReceiveResult::SharedDtor() {
  if (this != internal_default_instance()) delete tx_;
}

void HdsSignTransactionReceiveResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignTransactionReceiveResult& HdsSignTransactionReceiveResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignTransactionReceiveResult_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignTransactionReceiveResult::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tx_ != nullptr);
    tx_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignTransactionReceiveResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignTransactionReceiveResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.hds.HdsSignTransactionReceive tx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsSignTransactionReceive::_InternalParse;
        object = msg->mutable_tx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignTransactionReceiveResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.hds.HdsSignTransactionReceive tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignTransactionReceiveResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsSignTransactionReceive tx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tx(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
}

::google::protobuf::uint8* HdsSignTransactionReceiveResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsSignTransactionReceive tx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tx(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  return target;
}

size_t HdsSignTransactionReceiveResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.hds.HdsSignTransactionReceive tx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignTransactionReceiveResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignTransactionReceiveResult* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignTransactionReceiveResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
    MergeFrom(*source);
  }
}

void HdsSignTransactionReceiveResult::MergeFrom(const HdsSignTransactionReceiveResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx()) {
    mutable_tx()->::hw::trezor::messages::hds::HdsSignTransactionReceive::MergeFrom(from.tx());
  }
}

void HdsSignTransactionReceiveResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignTransactionReceiveResult::CopyFrom(const HdsSignTransactionReceiveResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionReceiveResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignTransactionReceiveResult::IsInitialized() const {
  return true;
}

void HdsSignTransactionReceiveResult::Swap(HdsSignTransactionReceiveResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignTransactionReceiveResult::InternalSwap(HdsSignTransactionReceiveResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tx_, other->tx_);
}

::google::protobuf::Metadata HdsSignTransactionReceiveResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignTransactionSplit::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsSignTransactionSplit_default_instance_._instance.get_mutable()->tx_common_ = const_cast< ::hw::trezor::messages::hds::HdsTxCommon*>(
      ::hw::trezor::messages::hds::HdsTxCommon::internal_default_instance());
}
class HdsSignTransactionSplit::HasBitSetters {
 public:
  static const ::hw::trezor::messages::hds::HdsTxCommon& tx_common(const HdsSignTransactionSplit* msg);
  static void set_has_tx_common(HdsSignTransactionSplit* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::hds::HdsTxCommon&
HdsSignTransactionSplit::HasBitSetters::tx_common(const HdsSignTransactionSplit* msg) {
  return *msg->tx_common_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignTransactionSplit::kTxCommonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignTransactionSplit::HdsSignTransactionSplit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignTransactionSplit)
}
HdsSignTransactionSplit::HdsSignTransactionSplit(const HdsSignTransactionSplit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tx_common()) {
    tx_common_ = new ::hw::trezor::messages::hds::HdsTxCommon(*from.tx_common_);
  } else {
    tx_common_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignTransactionSplit)
}

void HdsSignTransactionSplit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignTransactionSplit_messages_2dhds_2eproto.base);
  tx_common_ = nullptr;
}

HdsSignTransactionSplit::~HdsSignTransactionSplit() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignTransactionSplit)
  SharedDtor();
}

void HdsSignTransactionSplit::SharedDtor() {
  if (this != internal_default_instance()) delete tx_common_;
}

void HdsSignTransactionSplit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignTransactionSplit& HdsSignTransactionSplit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignTransactionSplit_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignTransactionSplit::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignTransactionSplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tx_common_ != nullptr);
    tx_common_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignTransactionSplit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignTransactionSplit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsTxCommon::_InternalParse;
        object = msg->mutable_tx_common();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignTransactionSplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignTransactionSplit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignTransactionSplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignTransactionSplit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignTransactionSplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignTransactionSplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tx_common(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignTransactionSplit)
}

::google::protobuf::uint8* HdsSignTransactionSplit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignTransactionSplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tx_common(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignTransactionSplit)
  return target;
}

size_t HdsSignTransactionSplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignTransactionSplit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.hds.HdsTxCommon tx_common = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tx_common_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignTransactionSplit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionSplit)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignTransactionSplit* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignTransactionSplit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignTransactionSplit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignTransactionSplit)
    MergeFrom(*source);
  }
}

void HdsSignTransactionSplit::MergeFrom(const HdsSignTransactionSplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionSplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx_common()) {
    mutable_tx_common()->::hw::trezor::messages::hds::HdsTxCommon::MergeFrom(from.tx_common());
  }
}

void HdsSignTransactionSplit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignTransactionSplit::CopyFrom(const HdsSignTransactionSplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignTransactionSplit::IsInitialized() const {
  return true;
}

void HdsSignTransactionSplit::Swap(HdsSignTransactionSplit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignTransactionSplit::InternalSwap(HdsSignTransactionSplit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tx_common_, other->tx_common_);
}

::google::protobuf::Metadata HdsSignTransactionSplit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HdsSignTransactionSplitResult::InitAsDefaultInstance() {
  ::hw::trezor::messages::hds::_HdsSignTransactionSplitResult_default_instance_._instance.get_mutable()->tx_ = const_cast< ::hw::trezor::messages::hds::HdsSignTransactionSplit*>(
      ::hw::trezor::messages::hds::HdsSignTransactionSplit::internal_default_instance());
}
class HdsSignTransactionSplitResult::HasBitSetters {
 public:
  static const ::hw::trezor::messages::hds::HdsSignTransactionSplit& tx(const HdsSignTransactionSplitResult* msg);
  static void set_has_tx(HdsSignTransactionSplitResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::hds::HdsSignTransactionSplit&
HdsSignTransactionSplitResult::HasBitSetters::tx(const HdsSignTransactionSplitResult* msg) {
  return *msg->tx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdsSignTransactionSplitResult::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdsSignTransactionSplitResult::HdsSignTransactionSplitResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
}
HdsSignTransactionSplitResult::HdsSignTransactionSplitResult(const HdsSignTransactionSplitResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tx()) {
    tx_ = new ::hw::trezor::messages::hds::HdsSignTransactionSplit(*from.tx_);
  } else {
    tx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
}

void HdsSignTransactionSplitResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HdsSignTransactionSplitResult_messages_2dhds_2eproto.base);
  tx_ = nullptr;
}

HdsSignTransactionSplitResult::~HdsSignTransactionSplitResult() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  SharedDtor();
}

void HdsSignTransactionSplitResult::SharedDtor() {
  if (this != internal_default_instance()) delete tx_;
}

void HdsSignTransactionSplitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdsSignTransactionSplitResult& HdsSignTransactionSplitResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HdsSignTransactionSplitResult_messages_2dhds_2eproto.base);
  return *internal_default_instance();
}


void HdsSignTransactionSplitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tx_ != nullptr);
    tx_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HdsSignTransactionSplitResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HdsSignTransactionSplitResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.hds.HdsSignTransactionSplit tx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::hds::HdsSignTransactionSplit::_InternalParse;
        object = msg->mutable_tx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HdsSignTransactionSplitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.hds.HdsSignTransactionSplit tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HdsSignTransactionSplitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsSignTransactionSplit tx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tx(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
}

::google::protobuf::uint8* HdsSignTransactionSplitResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.hds.HdsSignTransactionSplit tx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tx(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  return target;
}

size_t HdsSignTransactionSplitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.hds.HdsSignTransactionSplit tx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdsSignTransactionSplitResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const HdsSignTransactionSplitResult* source =
      ::google::protobuf::DynamicCastToGenerated<HdsSignTransactionSplitResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
    MergeFrom(*source);
  }
}

void HdsSignTransactionSplitResult::MergeFrom(const HdsSignTransactionSplitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx()) {
    mutable_tx()->::hw::trezor::messages::hds::HdsSignTransactionSplit::MergeFrom(from.tx());
  }
}

void HdsSignTransactionSplitResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdsSignTransactionSplitResult::CopyFrom(const HdsSignTransactionSplitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.hds.HdsSignTransactionSplitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdsSignTransactionSplitResult::IsInitialized() const {
  return true;
}

void HdsSignTransactionSplitResult::Swap(HdsSignTransactionSplitResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdsSignTransactionSplitResult::InternalSwap(HdsSignTransactionSplitResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tx_, other->tx_);
}

::google::protobuf::Metadata HdsSignTransactionSplitResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dhds_2eproto);
  return ::file_level_metadata_messages_2dhds_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hds
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsKeyIDV* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsKeyIDV >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsKeyIDV >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsCoinID* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsCoinID >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsCoinID >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsGenerateKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsGenerateKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsGenerateKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsGenerateNonce* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsGenerateNonce >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsGenerateNonce >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsGetNoncePublic* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsGetNoncePublic >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsGetNoncePublic >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsECCPoint* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsECCPoint >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsECCPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignature* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignature >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignMessage* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignMessage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsVerifyMessage* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsVerifyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsVerifyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsGetPublicKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsGetPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsGetPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsGetOwnerKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsGetOwnerKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsGetOwnerKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsOwnerKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsOwnerKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsOwnerKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsGenerateRangeproof* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsGenerateRangeproof >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsGenerateRangeproof >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsRangeproofData* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsRangeproofData >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsRangeproofData >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignedTransaction* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignedTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignedTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignTransaction_HdsKernelParametersOld >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignTransaction* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsGetPKdf* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsGetPKdf >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsGetPKdf >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsPKdf* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsPKdf >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsPKdf >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsGetNumSlots* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsGetNumSlots >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsGetNumSlots >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsNumSlots* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsNumSlots >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsNumSlots >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsTxCommon_HdsKernelParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsTxCommon* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsTxCommon >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsTxCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsTxMutualInfo* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsTxMutualInfo >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsTxMutualInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignTransactionSend* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignTransactionSend >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignTransactionSend >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignTransactionSendResult* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignTransactionSendResult >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignTransactionSendResult >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignTransactionReceive* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignTransactionReceive >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignTransactionReceive >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignTransactionReceiveResult* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignTransactionReceiveResult >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignTransactionReceiveResult >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignTransactionSplit* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignTransactionSplit >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignTransactionSplit >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::hds::HdsSignTransactionSplitResult* Arena::CreateMaybeMessage< ::hw::trezor::messages::hds::HdsSignTransactionSplitResult >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::hds::HdsSignTransactionSplitResult >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
